
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000027be  00002852  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800068  00800068  0000285a  2**0
                  ALLOC
  3 .stab         00002d84  00000000  00000000  0000285c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ccd  00000000  00000000  000055e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000072ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000073ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000755d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000091a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000afa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b22d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__vector_1>
       8:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__vector_2>
       c:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__vector_10>
      2c:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__vector_11>
      30:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a7 38       	cpi	r26, 0x87	; 135
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee eb       	ldi	r30, 0xBE	; 190
      78:	f7 e2       	ldi	r31, 0x27	; 39
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 cc 12 	call	0x2598	; 0x2598 <main>
      8a:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_INIT>:
 * @brief Initializes the ADC with the given configuration.
 *
 * @param[in] ADC_CFG Pointer to the ADC configuration structure.
 */
void ADC_INIT(ADC_Config_t* ADC_CFG)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
    G_ADC_cfg = *ADC_CFG;
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	9a 81       	ldd	r25, Y+2	; 0x02
     b62:	29 e7       	ldi	r18, 0x79	; 121
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	3c 83       	std	Y+4, r19	; 0x04
     b68:	2b 83       	std	Y+3, r18	; 0x03
     b6a:	9e 83       	std	Y+6, r25	; 0x06
     b6c:	8d 83       	std	Y+5, r24	; 0x05
     b6e:	37 e0       	ldi	r19, 0x07	; 7
     b70:	3f 83       	std	Y+7, r19	; 0x07
     b72:	ed 81       	ldd	r30, Y+5	; 0x05
     b74:	fe 81       	ldd	r31, Y+6	; 0x06
     b76:	00 80       	ld	r0, Z
     b78:	2d 81       	ldd	r18, Y+5	; 0x05
     b7a:	3e 81       	ldd	r19, Y+6	; 0x06
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	3e 83       	std	Y+6, r19	; 0x06
     b82:	2d 83       	std	Y+5, r18	; 0x05
     b84:	eb 81       	ldd	r30, Y+3	; 0x03
     b86:	fc 81       	ldd	r31, Y+4	; 0x04
     b88:	00 82       	st	Z, r0
     b8a:	2b 81       	ldd	r18, Y+3	; 0x03
     b8c:	3c 81       	ldd	r19, Y+4	; 0x04
     b8e:	2f 5f       	subi	r18, 0xFF	; 255
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	3c 83       	std	Y+4, r19	; 0x04
     b94:	2b 83       	std	Y+3, r18	; 0x03
     b96:	3f 81       	ldd	r19, Y+7	; 0x07
     b98:	31 50       	subi	r19, 0x01	; 1
     b9a:	3f 83       	std	Y+7, r19	; 0x07
     b9c:	8f 81       	ldd	r24, Y+7	; 0x07
     b9e:	88 23       	and	r24, r24
     ba0:	41 f7       	brne	.-48     	; 0xb72 <ADC_INIT+0x2c>
    // 1: Select voltage source
    ADMUX |= ADC_CFG->ADC_Voltage_Reference;
     ba2:	a7 e2       	ldi	r26, 0x27	; 39
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 e2       	ldi	r30, 0x27	; 39
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	90 81       	ld	r25, Z
     bac:	e9 81       	ldd	r30, Y+1	; 0x01
     bae:	fa 81       	ldd	r31, Y+2	; 0x02
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	89 2b       	or	r24, r25
     bb4:	8c 93       	st	X, r24

    // 2: Select ADC result presentation
    ADMUX |= ADC_CFG->ADC_Result_Presentation;
     bb6:	a7 e2       	ldi	r26, 0x27	; 39
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e7 e2       	ldi	r30, 0x27	; 39
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	90 81       	ld	r25, Z
     bc0:	e9 81       	ldd	r30, Y+1	; 0x01
     bc2:	fa 81       	ldd	r31, Y+2	; 0x02
     bc4:	82 81       	ldd	r24, Z+2	; 0x02
     bc6:	89 2b       	or	r24, r25
     bc8:	8c 93       	st	X, r24

    // 3: Select ADC prescaler
    ADCSRA |= ADC_CFG->ADC_Prescaler;
     bca:	a6 e2       	ldi	r26, 0x26	; 38
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e6 e2       	ldi	r30, 0x26	; 38
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	90 81       	ld	r25, Z
     bd4:	e9 81       	ldd	r30, Y+1	; 0x01
     bd6:	fa 81       	ldd	r31, Y+2	; 0x02
     bd8:	83 81       	ldd	r24, Z+3	; 0x03
     bda:	89 2b       	or	r24, r25
     bdc:	8c 93       	st	X, r24

    // 4: Select ADC IRQ
    ADCSRA |= ADC_CFG->ADC_IRQ;
     bde:	a6 e2       	ldi	r26, 0x26	; 38
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e6 e2       	ldi	r30, 0x26	; 38
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	90 81       	ld	r25, Z
     be8:	e9 81       	ldd	r30, Y+1	; 0x01
     bea:	fa 81       	ldd	r31, Y+2	; 0x02
     bec:	84 81       	ldd	r24, Z+4	; 0x04
     bee:	89 2b       	or	r24, r25
     bf0:	8c 93       	st	X, r24
    if (ADC_CFG->ADC_IRQ == ADC_IRQ_Enable)
     bf2:	e9 81       	ldd	r30, Y+1	; 0x01
     bf4:	fa 81       	ldd	r31, Y+2	; 0x02
     bf6:	84 81       	ldd	r24, Z+4	; 0x04
     bf8:	88 30       	cpi	r24, 0x08	; 8
     bfa:	09 f4       	brne	.+2      	; 0xbfe <ADC_INIT+0xb8>
    {
        sei();
     bfc:	78 94       	sei
    }

    // 5: Enable ADC
    ADCSRA |= (1 << ADEN);
     bfe:	a6 e2       	ldi	r26, 0x26	; 38
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e6 e2       	ldi	r30, 0x26	; 38
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 68       	ori	r24, 0x80	; 128
     c0a:	8c 93       	st	X, r24
    // 6: Start conversion if in free running mode
    if (ADC_CFG->ADC_Mode == ADC_Mode_free_running_mode)
     c0c:	e9 81       	ldd	r30, Y+1	; 0x01
     c0e:	fa 81       	ldd	r31, Y+2	; 0x02
     c10:	80 81       	ld	r24, Z
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	39 f4       	brne	.+14     	; 0xc24 <ADC_INIT+0xde>
    {
        SET_BIT(ADCSRA, ADSC);
     c16:	a6 e2       	ldi	r26, 0x26	; 38
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e6 e2       	ldi	r30, 0x26	; 38
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	80 64       	ori	r24, 0x40	; 64
     c22:	8c 93       	st	X, r24
    }
}
     c24:	27 96       	adiw	r28, 0x07	; 7
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <ADC_DEINIT>:

/**
 * @brief Deinitializes the ADC, resetting its registers.
 */
void ADC_DEINIT(void)
{
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
    ADMUX = 0x00;
     c3e:	e7 e2       	ldi	r30, 0x27	; 39
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	10 82       	st	Z, r1
    ADCSRA = 0x00;
     c44:	e6 e2       	ldi	r30, 0x26	; 38
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	10 82       	st	Z, r1
}
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <ADC_Read_Channel>:
 * @param[in] channel Pointer to the channel selection enum.
 * @param[out] result Pointer to the variable where the ADC result will be stored.
 * @param[in] polling Pointer to the polling mechanism enum.
 */
void ADC_Read_Channel(channel_select_t* channel, uint16_t* result, Polling_Mechanism_t* polling)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	00 d0       	rcall	.+0      	; 0xc56 <ADC_Read_Channel+0x6>
     c56:	00 d0       	rcall	.+0      	; 0xc58 <ADC_Read_Channel+0x8>
     c58:	00 d0       	rcall	.+0      	; 0xc5a <ADC_Read_Channel+0xa>
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	89 83       	std	Y+1, r24	; 0x01
     c62:	7c 83       	std	Y+4, r23	; 0x04
     c64:	6b 83       	std	Y+3, r22	; 0x03
     c66:	5e 83       	std	Y+6, r21	; 0x06
     c68:	4d 83       	std	Y+5, r20	; 0x05
    // Clear selected channel to select another channel
    CLEAR_BIT(ADMUX, MUX0);
     c6a:	a7 e2       	ldi	r26, 0x27	; 39
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e7 e2       	ldi	r30, 0x27	; 39
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8e 7f       	andi	r24, 0xFE	; 254
     c76:	8c 93       	st	X, r24
    CLEAR_BIT(ADMUX, MUX1);
     c78:	a7 e2       	ldi	r26, 0x27	; 39
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e7 e2       	ldi	r30, 0x27	; 39
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8d 7f       	andi	r24, 0xFD	; 253
     c84:	8c 93       	st	X, r24
    CLEAR_BIT(ADMUX, MUX2);
     c86:	a7 e2       	ldi	r26, 0x27	; 39
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e7 e2       	ldi	r30, 0x27	; 39
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	8b 7f       	andi	r24, 0xFB	; 251
     c92:	8c 93       	st	X, r24
    CLEAR_BIT(ADMUX, MUX3);
     c94:	a7 e2       	ldi	r26, 0x27	; 39
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e7 e2       	ldi	r30, 0x27	; 39
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	87 7f       	andi	r24, 0xF7	; 247
     ca0:	8c 93       	st	X, r24
    CLEAR_BIT(ADMUX, MUX4);
     ca2:	a7 e2       	ldi	r26, 0x27	; 39
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e7 e2       	ldi	r30, 0x27	; 39
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8f 7e       	andi	r24, 0xEF	; 239
     cae:	8c 93       	st	X, r24

    // 1: Select channel
    ADMUX |= ((uint8_t)channel << MUX0);
     cb0:	a7 e2       	ldi	r26, 0x27	; 39
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e7 e2       	ldi	r30, 0x27	; 39
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	20 81       	ld	r18, Z
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	82 2b       	or	r24, r18
     cc0:	8c 93       	st	X, r24

    // 2: Make pin as an input
    CLEAR_BIT(DDRA, (uint8_t)channel);
     cc2:	aa e3       	ldi	r26, 0x3A	; 58
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ea e3       	ldi	r30, 0x3A	; 58
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 2e       	mov	r0, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <ADC_Read_Channel+0x92>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	0a 94       	dec	r0
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <ADC_Read_Channel+0x8e>
     ce6:	80 95       	com	r24
     ce8:	84 23       	and	r24, r20
     cea:	8c 93       	st	X, r24

    // 3: Start conversion if in single conversion mode
    if (G_ADC_cfg.ADC_Mode == ADC_Mode_single_conversion)
     cec:	80 91 79 00 	lds	r24, 0x0079
     cf0:	88 23       	and	r24, r24
     cf2:	39 f4       	brne	.+14     	; 0xd02 <ADC_Read_Channel+0xb2>
    {
        SET_BIT(ADCSRA, ADSC);
     cf4:	a6 e2       	ldi	r26, 0x26	; 38
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e6 e2       	ldi	r30, 0x26	; 38
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 64       	ori	r24, 0x40	; 64
     d00:	8c 93       	st	X, r24
    }

    // 4: Wait until ADC conversion complete if polling is enabled
    if (polling == polling_enable)
     d02:	8d 81       	ldd	r24, Y+5	; 0x05
     d04:	9e 81       	ldd	r25, Y+6	; 0x06
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	91 05       	cpc	r25, r1
     d0a:	09 f0       	breq	.+2      	; 0xd0e <ADC_Read_Channel+0xbe>
     d0c:	42 c0       	rjmp	.+132    	; 0xd92 <ADC_Read_Channel+0x142>
    {
        while (!READ_BIT(ADCSRA, ADIF));
     d0e:	e6 e2       	ldi	r30, 0x26	; 38
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	82 95       	swap	r24
     d16:	8f 70       	andi	r24, 0x0F	; 15
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	81 70       	andi	r24, 0x01	; 1
     d1e:	90 70       	andi	r25, 0x00	; 0
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	a9 f3       	breq	.-22     	; 0xd0e <ADC_Read_Channel+0xbe>
        // 5: Read conversion result
        if (G_ADC_cfg.ADC_Result_Presentation == ADC_Result_Presentation_Left)
     d24:	80 91 7b 00 	lds	r24, 0x007B
     d28:	80 32       	cpi	r24, 0x20	; 32
     d2a:	d9 f4       	brne	.+54     	; 0xd62 <ADC_Read_Channel+0x112>
        {
            *result = (((ADCL & 0xC0) >> 6) | (ADCH << 2));
     d2c:	e4 e2       	ldi	r30, 0x24	; 36
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	82 95       	swap	r24
     d34:	86 95       	lsr	r24
     d36:	86 95       	lsr	r24
     d38:	83 70       	andi	r24, 0x03	; 3
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	9c 01       	movw	r18, r24
     d40:	30 70       	andi	r19, 0x00	; 0
     d42:	e5 e2       	ldi	r30, 0x25	; 37
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	82 2b       	or	r24, r18
     d56:	93 2b       	or	r25, r19
     d58:	eb 81       	ldd	r30, Y+3	; 0x03
     d5a:	fc 81       	ldd	r31, Y+4	; 0x04
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	80 83       	st	Z, r24
     d60:	18 c0       	rjmp	.+48     	; 0xd92 <ADC_Read_Channel+0x142>
        }
        else if (G_ADC_cfg.ADC_Result_Presentation == ADC_Result_Presentation_Right)
     d62:	80 91 7b 00 	lds	r24, 0x007B
     d66:	88 23       	and	r24, r24
     d68:	a1 f4       	brne	.+40     	; 0xd92 <ADC_Read_Channel+0x142>
        {
            *result = (ADCL | ((ADCH & 0x03) << 8));
     d6a:	e4 e2       	ldi	r30, 0x24	; 36
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	e5 e2       	ldi	r30, 0x25	; 37
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	88 2f       	mov	r24, r24
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	83 70       	andi	r24, 0x03	; 3
     d80:	90 70       	andi	r25, 0x00	; 0
     d82:	98 2f       	mov	r25, r24
     d84:	88 27       	eor	r24, r24
     d86:	82 2b       	or	r24, r18
     d88:	93 2b       	or	r25, r19
     d8a:	eb 81       	ldd	r30, Y+3	; 0x03
     d8c:	fc 81       	ldd	r31, Y+4	; 0x04
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	80 83       	st	Z, r24
        }
    }
    // 6: Clear ADIF flag
    CLEAR_BIT(ADCSRA, ADIF);
     d92:	a6 e2       	ldi	r26, 0x26	; 38
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e6 e2       	ldi	r30, 0x26	; 38
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	8f 7e       	andi	r24, 0xEF	; 239
     d9e:	8c 93       	st	X, r24
}
     da0:	26 96       	adiw	r28, 0x06	; 6
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <GPIO_setupPinDirection>:
 * @param[in] port_num The port number to which the pin belongs.
 * @param[in] pin_num The pin number to be configured.
 * @param[in] direction The direction to be set (input or output).
 */
void GPIO_setupPinDirection(uint8_t port_num, uint8_t pin_num,
		GPIO_PinDirectionType direction) {
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	27 97       	sbiw	r28, 0x07	; 7
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	8b 83       	std	Y+3, r24	; 0x03
     dc8:	6c 83       	std	Y+4, r22	; 0x04
     dca:	4d 83       	std	Y+5, r20	; 0x05

	    volatile uint8_t *ddr_reg = NULL;
     dcc:	1a 82       	std	Y+2, r1	; 0x02
     dce:	19 82       	std	Y+1, r1	; 0x01

	    /* Check if the pin number and port number are within valid range */
	    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     dd0:	8c 81       	ldd	r24, Y+4	; 0x04
     dd2:	88 30       	cpi	r24, 0x08	; 8
     dd4:	08 f0       	brcs	.+2      	; 0xdd8 <GPIO_setupPinDirection+0x26>
     dd6:	61 c0       	rjmp	.+194    	; 0xe9a <GPIO_setupPinDirection+0xe8>
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	84 30       	cpi	r24, 0x04	; 4
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <GPIO_setupPinDirection+0x2e>
     dde:	5d c0       	rjmp	.+186    	; 0xe9a <GPIO_setupPinDirection+0xe8>
	        /* Invalid pin or port number, do nothing */
	        return;
	    }

	    /* Determine the DDR register based on the port number */
	    switch (port_num) {
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	3f 83       	std	Y+7, r19	; 0x07
     de8:	2e 83       	std	Y+6, r18	; 0x06
     dea:	8e 81       	ldd	r24, Y+6	; 0x06
     dec:	9f 81       	ldd	r25, Y+7	; 0x07
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	91 05       	cpc	r25, r1
     df2:	d1 f0       	breq	.+52     	; 0xe28 <GPIO_setupPinDirection+0x76>
     df4:	2e 81       	ldd	r18, Y+6	; 0x06
     df6:	3f 81       	ldd	r19, Y+7	; 0x07
     df8:	22 30       	cpi	r18, 0x02	; 2
     dfa:	31 05       	cpc	r19, r1
     dfc:	2c f4       	brge	.+10     	; 0xe08 <GPIO_setupPinDirection+0x56>
     dfe:	8e 81       	ldd	r24, Y+6	; 0x06
     e00:	9f 81       	ldd	r25, Y+7	; 0x07
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	61 f0       	breq	.+24     	; 0xe1e <GPIO_setupPinDirection+0x6c>
     e06:	49 c0       	rjmp	.+146    	; 0xe9a <GPIO_setupPinDirection+0xe8>
     e08:	2e 81       	ldd	r18, Y+6	; 0x06
     e0a:	3f 81       	ldd	r19, Y+7	; 0x07
     e0c:	22 30       	cpi	r18, 0x02	; 2
     e0e:	31 05       	cpc	r19, r1
     e10:	81 f0       	breq	.+32     	; 0xe32 <GPIO_setupPinDirection+0x80>
     e12:	8e 81       	ldd	r24, Y+6	; 0x06
     e14:	9f 81       	ldd	r25, Y+7	; 0x07
     e16:	83 30       	cpi	r24, 0x03	; 3
     e18:	91 05       	cpc	r25, r1
     e1a:	81 f0       	breq	.+32     	; 0xe3c <GPIO_setupPinDirection+0x8a>
     e1c:	3e c0       	rjmp	.+124    	; 0xe9a <GPIO_setupPinDirection+0xe8>
	        case PORTA_ID:
	            ddr_reg = &DDRA;
     e1e:	8a e3       	ldi	r24, 0x3A	; 58
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	0e c0       	rjmp	.+28     	; 0xe44 <GPIO_setupPinDirection+0x92>
	            break;
	        case PORTB_ID:
	            ddr_reg = &DDRB;
     e28:	87 e3       	ldi	r24, 0x37	; 55
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	09 c0       	rjmp	.+18     	; 0xe44 <GPIO_setupPinDirection+0x92>
	            break;
	        case PORTC_ID:
	            ddr_reg = &DDRC;
     e32:	84 e3       	ldi	r24, 0x34	; 52
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	04 c0       	rjmp	.+8      	; 0xe44 <GPIO_setupPinDirection+0x92>
	            break;
	        case PORTD_ID:
	            ddr_reg = &DDRD;
     e3c:	81 e3       	ldi	r24, 0x31	; 49
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	89 83       	std	Y+1, r24	; 0x01
	        default:
	            return; /* Invalid port number, do nothing */
	    }

	    /* Set or clear the bit in the DDR register based on the direction */
	    if (direction) {
     e44:	8d 81       	ldd	r24, Y+5	; 0x05
     e46:	88 23       	and	r24, r24
     e48:	a1 f0       	breq	.+40     	; 0xe72 <GPIO_setupPinDirection+0xc0>
	        SET_BIT(*ddr_reg, pin_num);
     e4a:	e9 81       	ldd	r30, Y+1	; 0x01
     e4c:	fa 81       	ldd	r31, Y+2	; 0x02
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <GPIO_setupPinDirection+0xb2>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <GPIO_setupPinDirection+0xae>
     e68:	84 2b       	or	r24, r20
     e6a:	e9 81       	ldd	r30, Y+1	; 0x01
     e6c:	fa 81       	ldd	r31, Y+2	; 0x02
     e6e:	80 83       	st	Z, r24
     e70:	14 c0       	rjmp	.+40     	; 0xe9a <GPIO_setupPinDirection+0xe8>
	    } else {
	        CLEAR_BIT(*ddr_reg, pin_num);
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	80 81       	ld	r24, Z
     e78:	48 2f       	mov	r20, r24
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <GPIO_setupPinDirection+0xda>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <GPIO_setupPinDirection+0xd6>
     e90:	80 95       	com	r24
     e92:	84 23       	and	r24, r20
     e94:	e9 81       	ldd	r30, Y+1	; 0x01
     e96:	fa 81       	ldd	r31, Y+2	; 0x02
     e98:	80 83       	st	Z, r24
	    }
	}
     e9a:	27 96       	adiw	r28, 0x07	; 7
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <GPIO_writePin>:
 *
 * @param[in] port_num The port number to which the pin belongs.
 * @param[in] pin_num The pin number to be written to.
 * @param[in] value The value to be written to the pin (high or low).
 */
void GPIO_writePin(uint8_t port_num, uint8_t pin_num, uint8_t value) {
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	27 97       	sbiw	r28, 0x07	; 7
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	8b 83       	std	Y+3, r24	; 0x03
     ec2:	6c 83       	std	Y+4, r22	; 0x04
     ec4:	4d 83       	std	Y+5, r20	; 0x05

    volatile uint8_t *port_reg = NULL;
     ec6:	1a 82       	std	Y+2, r1	; 0x02
     ec8:	19 82       	std	Y+1, r1	; 0x01

    /* Check if the pin number and port number are within valid range */
    if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	88 30       	cpi	r24, 0x08	; 8
     ece:	08 f0       	brcs	.+2      	; 0xed2 <GPIO_writePin+0x26>
     ed0:	61 c0       	rjmp	.+194    	; 0xf94 <GPIO_writePin+0xe8>
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	84 30       	cpi	r24, 0x04	; 4
     ed6:	08 f0       	brcs	.+2      	; 0xeda <GPIO_writePin+0x2e>
     ed8:	5d c0       	rjmp	.+186    	; 0xf94 <GPIO_writePin+0xe8>
        /* Invalid pin or port number, do nothing */
        return;
    }

    /* Determine the PORT register based on the port number */
    switch (port_num) {
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	3f 83       	std	Y+7, r19	; 0x07
     ee2:	2e 83       	std	Y+6, r18	; 0x06
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	91 05       	cpc	r25, r1
     eec:	d1 f0       	breq	.+52     	; 0xf22 <GPIO_writePin+0x76>
     eee:	2e 81       	ldd	r18, Y+6	; 0x06
     ef0:	3f 81       	ldd	r19, Y+7	; 0x07
     ef2:	22 30       	cpi	r18, 0x02	; 2
     ef4:	31 05       	cpc	r19, r1
     ef6:	2c f4       	brge	.+10     	; 0xf02 <GPIO_writePin+0x56>
     ef8:	8e 81       	ldd	r24, Y+6	; 0x06
     efa:	9f 81       	ldd	r25, Y+7	; 0x07
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	61 f0       	breq	.+24     	; 0xf18 <GPIO_writePin+0x6c>
     f00:	49 c0       	rjmp	.+146    	; 0xf94 <GPIO_writePin+0xe8>
     f02:	2e 81       	ldd	r18, Y+6	; 0x06
     f04:	3f 81       	ldd	r19, Y+7	; 0x07
     f06:	22 30       	cpi	r18, 0x02	; 2
     f08:	31 05       	cpc	r19, r1
     f0a:	81 f0       	breq	.+32     	; 0xf2c <GPIO_writePin+0x80>
     f0c:	8e 81       	ldd	r24, Y+6	; 0x06
     f0e:	9f 81       	ldd	r25, Y+7	; 0x07
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	91 05       	cpc	r25, r1
     f14:	81 f0       	breq	.+32     	; 0xf36 <GPIO_writePin+0x8a>
     f16:	3e c0       	rjmp	.+124    	; 0xf94 <GPIO_writePin+0xe8>
        case PORTA_ID:
            port_reg = &PORTA;
     f18:	8b e3       	ldi	r24, 0x3B	; 59
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	0e c0       	rjmp	.+28     	; 0xf3e <GPIO_writePin+0x92>
            break;
        case PORTB_ID:
            port_reg = &PORTB;
     f22:	88 e3       	ldi	r24, 0x38	; 56
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <GPIO_writePin+0x92>
            break;
        case PORTC_ID:
            port_reg = &PORTC;
     f2c:	85 e3       	ldi	r24, 0x35	; 53
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <GPIO_writePin+0x92>
            break;
        case PORTD_ID:
            port_reg = &PORTD;
     f36:	82 e3       	ldi	r24, 0x32	; 50
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
        default:
            return; /* Invalid port number, do nothing */
    }

    /* Set or clear the bit in the PORT register based on the value */
    if (value) {
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	88 23       	and	r24, r24
     f42:	a1 f0       	breq	.+40     	; 0xf6c <GPIO_writePin+0xc0>
        SET_BIT(*port_reg, pin_num);
     f44:	e9 81       	ldd	r30, Y+1	; 0x01
     f46:	fa 81       	ldd	r31, Y+2	; 0x02
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <GPIO_writePin+0xb2>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <GPIO_writePin+0xae>
     f62:	84 2b       	or	r24, r20
     f64:	e9 81       	ldd	r30, Y+1	; 0x01
     f66:	fa 81       	ldd	r31, Y+2	; 0x02
     f68:	80 83       	st	Z, r24
     f6a:	14 c0       	rjmp	.+40     	; 0xf94 <GPIO_writePin+0xe8>
    } else {
        CLEAR_BIT(*port_reg, pin_num);
     f6c:	e9 81       	ldd	r30, Y+1	; 0x01
     f6e:	fa 81       	ldd	r31, Y+2	; 0x02
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <GPIO_writePin+0xda>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <GPIO_writePin+0xd6>
     f8a:	80 95       	com	r24
     f8c:	84 23       	and	r24, r20
     f8e:	e9 81       	ldd	r30, Y+1	; 0x01
     f90:	fa 81       	ldd	r31, Y+2	; 0x02
     f92:	80 83       	st	Z, r24
    }

}
     f94:	27 96       	adiw	r28, 0x07	; 7
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <GPIO_readPin>:
 * @param[in] port_num The port number to which the pin belongs.
 * @param[in] pin_num The pin number to be read.
 *
 * @return The current value of the pin (high or low).
 */
uint8_t GPIO_readPin(uint8_t port_num, uint8_t pin_num) {
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	28 97       	sbiw	r28, 0x08	; 8
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	8c 83       	std	Y+4, r24	; 0x04
     fbc:	6d 83       	std	Y+5, r22	; 0x05

	volatile uint8_t *pin_reg = NULL;
     fbe:	1b 82       	std	Y+3, r1	; 0x03
     fc0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t pinValue = LOGIC_LOW;
     fc2:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the pin number and port number are within valid range */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	88 30       	cpi	r24, 0x08	; 8
     fc8:	18 f4       	brcc	.+6      	; 0xfd0 <GPIO_readPin+0x2a>
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	84 30       	cpi	r24, 0x04	; 4
     fce:	18 f0       	brcs	.+6      	; 0xfd6 <GPIO_readPin+0x30>
		/* Invalid pin or port number, return LOGIC_LOW */
		return pinValue;
     fd0:	29 81       	ldd	r18, Y+1	; 0x01
     fd2:	28 87       	std	Y+8, r18	; 0x08
     fd4:	56 c0       	rjmp	.+172    	; 0x1082 <GPIO_readPin+0xdc>
	}

	/* Determine the PIN register based on the port number */
	switch (port_num) {
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	48 2f       	mov	r20, r24
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	5f 83       	std	Y+7, r21	; 0x07
     fde:	4e 83       	std	Y+6, r20	; 0x06
     fe0:	8e 81       	ldd	r24, Y+6	; 0x06
     fe2:	9f 81       	ldd	r25, Y+7	; 0x07
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	91 05       	cpc	r25, r1
     fe8:	d9 f0       	breq	.+54     	; 0x1020 <GPIO_readPin+0x7a>
     fea:	2e 81       	ldd	r18, Y+6	; 0x06
     fec:	3f 81       	ldd	r19, Y+7	; 0x07
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	34 f4       	brge	.+12     	; 0x1000 <GPIO_readPin+0x5a>
     ff4:	4e 81       	ldd	r20, Y+6	; 0x06
     ff6:	5f 81       	ldd	r21, Y+7	; 0x07
     ff8:	41 15       	cp	r20, r1
     ffa:	51 05       	cpc	r21, r1
     ffc:	61 f0       	breq	.+24     	; 0x1016 <GPIO_readPin+0x70>
     ffe:	1f c0       	rjmp	.+62     	; 0x103e <GPIO_readPin+0x98>
    1000:	8e 81       	ldd	r24, Y+6	; 0x06
    1002:	9f 81       	ldd	r25, Y+7	; 0x07
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	91 05       	cpc	r25, r1
    1008:	81 f0       	breq	.+32     	; 0x102a <GPIO_readPin+0x84>
    100a:	2e 81       	ldd	r18, Y+6	; 0x06
    100c:	3f 81       	ldd	r19, Y+7	; 0x07
    100e:	23 30       	cpi	r18, 0x03	; 3
    1010:	31 05       	cpc	r19, r1
    1012:	81 f0       	breq	.+32     	; 0x1034 <GPIO_readPin+0x8e>
    1014:	14 c0       	rjmp	.+40     	; 0x103e <GPIO_readPin+0x98>
	case PORTA_ID:
		pin_reg = &PINA;
    1016:	89 e3       	ldi	r24, 0x39	; 57
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	9b 83       	std	Y+3, r25	; 0x03
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	12 c0       	rjmp	.+36     	; 0x1044 <GPIO_readPin+0x9e>
		break;
	case PORTB_ID:
		pin_reg = &PINB;
    1020:	86 e3       	ldi	r24, 0x36	; 54
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9b 83       	std	Y+3, r25	; 0x03
    1026:	8a 83       	std	Y+2, r24	; 0x02
    1028:	0d c0       	rjmp	.+26     	; 0x1044 <GPIO_readPin+0x9e>
		break;
	case PORTC_ID:
		pin_reg = &PINC;
    102a:	83 e3       	ldi	r24, 0x33	; 51
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9b 83       	std	Y+3, r25	; 0x03
    1030:	8a 83       	std	Y+2, r24	; 0x02
    1032:	08 c0       	rjmp	.+16     	; 0x1044 <GPIO_readPin+0x9e>
		break;
	case PORTD_ID:
		pin_reg = &PIND;
    1034:	80 e3       	ldi	r24, 0x30	; 48
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	9b 83       	std	Y+3, r25	; 0x03
    103a:	8a 83       	std	Y+2, r24	; 0x02
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <GPIO_readPin+0x9e>
		break;
	default:
		return pinValue; /* Invalid port number, return LOGIC_LOW */
    103e:	39 81       	ldd	r19, Y+1	; 0x01
    1040:	38 87       	std	Y+8, r19	; 0x08
    1042:	1f c0       	rjmp	.+62     	; 0x1082 <GPIO_readPin+0xdc>
	}

	/* Read the value of the pin from the PIN register */
	pinValue = GET_BIT(*pin_reg, pin_num);
    1044:	ea 81       	ldd	r30, Y+2	; 0x02
    1046:	fb 81       	ldd	r31, Y+3	; 0x03
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <GPIO_readPin+0xb8>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	2a 95       	dec	r18
    1060:	e2 f7       	brpl	.-8      	; 0x105a <GPIO_readPin+0xb4>
    1062:	9a 01       	movw	r18, r20
    1064:	28 23       	and	r18, r24
    1066:	39 23       	and	r19, r25
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a9 01       	movw	r20, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <GPIO_readPin+0xd0>
    1072:	55 95       	asr	r21
    1074:	47 95       	ror	r20
    1076:	8a 95       	dec	r24
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <GPIO_readPin+0xcc>
    107a:	ca 01       	movw	r24, r20
    107c:	89 83       	std	Y+1, r24	; 0x01

	return pinValue;
    107e:	59 81       	ldd	r21, Y+1	; 0x01
    1080:	58 87       	std	Y+8, r21	; 0x08
    1082:	88 85       	ldd	r24, Y+8	; 0x08
}
    1084:	28 96       	adiw	r28, 0x08	; 8
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <GPIO_setupPortDirection>:
 * @brief Configures the direction of all pins in a specified port.
 *
 * @param[in] port_num The port number to be configured.
 * @param[in] direction The direction to be set for the port (input or output).
 */
void GPIO_setupPortDirection(uint8_t port_num, GPIO_PortDirectionType direction) {
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	00 d0       	rcall	.+0      	; 0x109c <GPIO_setupPortDirection+0x6>
    109c:	00 d0       	rcall	.+0      	; 0x109e <GPIO_setupPortDirection+0x8>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <GPIO_setupPortDirection+0xa>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	8b 83       	std	Y+3, r24	; 0x03
    10a6:	6c 83       	std	Y+4, r22	; 0x04

    volatile uint8_t *ddr_reg = NULL;
    10a8:	1a 82       	std	Y+2, r1	; 0x02
    10aa:	19 82       	std	Y+1, r1	; 0x01

    /* Determine the DDR register based on the port number */
    switch (port_num) {
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	3e 83       	std	Y+6, r19	; 0x06
    10b4:	2d 83       	std	Y+5, r18	; 0x05
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	91 05       	cpc	r25, r1
    10be:	d1 f0       	breq	.+52     	; 0x10f4 <GPIO_setupPortDirection+0x5e>
    10c0:	2d 81       	ldd	r18, Y+5	; 0x05
    10c2:	3e 81       	ldd	r19, Y+6	; 0x06
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	2c f4       	brge	.+10     	; 0x10d4 <GPIO_setupPortDirection+0x3e>
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	61 f0       	breq	.+24     	; 0x10ea <GPIO_setupPortDirection+0x54>
    10d2:	22 c0       	rjmp	.+68     	; 0x1118 <GPIO_setupPortDirection+0x82>
    10d4:	2d 81       	ldd	r18, Y+5	; 0x05
    10d6:	3e 81       	ldd	r19, Y+6	; 0x06
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	81 f0       	breq	.+32     	; 0x10fe <GPIO_setupPortDirection+0x68>
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	91 05       	cpc	r25, r1
    10e6:	81 f0       	breq	.+32     	; 0x1108 <GPIO_setupPortDirection+0x72>
    10e8:	17 c0       	rjmp	.+46     	; 0x1118 <GPIO_setupPortDirection+0x82>
        case PORTA_ID:
            ddr_reg = &DDRA;
    10ea:	8a e3       	ldi	r24, 0x3A	; 58
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9a 83       	std	Y+2, r25	; 0x02
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	0e c0       	rjmp	.+28     	; 0x1110 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTB_ID:
            ddr_reg = &DDRB;
    10f4:	87 e3       	ldi	r24, 0x37	; 55
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	9a 83       	std	Y+2, r25	; 0x02
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTC_ID:
            ddr_reg = &DDRC;
    10fe:	84 e3       	ldi	r24, 0x34	; 52
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTD_ID:
            ddr_reg = &DDRD;
    1108:	81 e3       	ldi	r24, 0x31	; 49
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
        default:
            return; /* Invalid port number, do nothing */
    }

    /* Set the direction for the port */
    *ddr_reg = direction;
    1110:	e9 81       	ldd	r30, Y+1	; 0x01
    1112:	fa 81       	ldd	r31, Y+2	; 0x02
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	80 83       	st	Z, r24
}
    1118:	26 96       	adiw	r28, 0x06	; 6
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <GPIO_writePort>:
 * @brief Writes a value to all pins in a specified port.
 *
 * @param[in] port_num The port number to which the value will be written.
 * @param[in] value The value to be written to the port.
 */
void GPIO_writePort(uint8_t port_num, uint8_t value) {
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <GPIO_writePort+0x6>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <GPIO_writePort+0x8>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <GPIO_writePort+0xa>
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	8b 83       	std	Y+3, r24	; 0x03
    113a:	6c 83       	std	Y+4, r22	; 0x04

    volatile uint8_t *port_reg = NULL;
    113c:	1a 82       	std	Y+2, r1	; 0x02
    113e:	19 82       	std	Y+1, r1	; 0x01

    /* Determine the PORT register based on the port number */
    switch (port_num) {
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3e 83       	std	Y+6, r19	; 0x06
    1148:	2d 83       	std	Y+5, r18	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	91 05       	cpc	r25, r1
    1152:	d1 f0       	breq	.+52     	; 0x1188 <GPIO_writePort+0x5e>
    1154:	2d 81       	ldd	r18, Y+5	; 0x05
    1156:	3e 81       	ldd	r19, Y+6	; 0x06
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	2c f4       	brge	.+10     	; 0x1168 <GPIO_writePort+0x3e>
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	61 f0       	breq	.+24     	; 0x117e <GPIO_writePort+0x54>
    1166:	22 c0       	rjmp	.+68     	; 0x11ac <GPIO_writePort+0x82>
    1168:	2d 81       	ldd	r18, Y+5	; 0x05
    116a:	3e 81       	ldd	r19, Y+6	; 0x06
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	81 f0       	breq	.+32     	; 0x1192 <GPIO_writePort+0x68>
    1172:	8d 81       	ldd	r24, Y+5	; 0x05
    1174:	9e 81       	ldd	r25, Y+6	; 0x06
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	81 f0       	breq	.+32     	; 0x119c <GPIO_writePort+0x72>
    117c:	17 c0       	rjmp	.+46     	; 0x11ac <GPIO_writePort+0x82>
        case PORTA_ID:
            port_reg = &PORTA;
    117e:	8b e3       	ldi	r24, 0x3B	; 59
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9a 83       	std	Y+2, r25	; 0x02
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	0e c0       	rjmp	.+28     	; 0x11a4 <GPIO_writePort+0x7a>
            break;
        case PORTB_ID:
            port_reg = &PORTB;
    1188:	88 e3       	ldi	r24, 0x38	; 56
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <GPIO_writePort+0x7a>
            break;
        case PORTC_ID:
            port_reg = &PORTC;
    1192:	85 e3       	ldi	r24, 0x35	; 53
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <GPIO_writePort+0x7a>
            break;
        case PORTD_ID:
            port_reg = &PORTD;
    119c:	82 e3       	ldi	r24, 0x32	; 50
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	89 83       	std	Y+1, r24	; 0x01
        default:
            return; /* Invalid port number, do nothing */
    }

    /* Write the value to the PORT register */
    *port_reg = value;
    11a4:	e9 81       	ldd	r30, Y+1	; 0x01
    11a6:	fa 81       	ldd	r31, Y+2	; 0x02
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	80 83       	st	Z, r24
}
    11ac:	26 96       	adiw	r28, 0x06	; 6
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <GPIO_readPort>:
 *
 * @param[in] port_num The port number to be read.
 *
 * @return The current value of the port.
 */
uint8_t GPIO_readPort(uint8_t port_num) {
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	27 97       	sbiw	r28, 0x07	; 7
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	8c 83       	std	Y+4, r24	; 0x04
    volatile uint8_t *pin_reg = NULL;
    11d4:	1b 82       	std	Y+3, r1	; 0x03
    11d6:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t portValue = 0;
    11d8:	19 82       	std	Y+1, r1	; 0x01

    /* Determine the PIN register based on the port number */
    switch (port_num) {
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3f 83       	std	Y+7, r19	; 0x07
    11e2:	2e 83       	std	Y+6, r18	; 0x06
    11e4:	8e 81       	ldd	r24, Y+6	; 0x06
    11e6:	9f 81       	ldd	r25, Y+7	; 0x07
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	d1 f0       	breq	.+52     	; 0x1222 <GPIO_readPort+0x64>
    11ee:	2e 81       	ldd	r18, Y+6	; 0x06
    11f0:	3f 81       	ldd	r19, Y+7	; 0x07
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <GPIO_readPort+0x44>
    11f8:	8e 81       	ldd	r24, Y+6	; 0x06
    11fa:	9f 81       	ldd	r25, Y+7	; 0x07
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 f0       	breq	.+24     	; 0x1218 <GPIO_readPort+0x5a>
    1200:	1f c0       	rjmp	.+62     	; 0x1240 <GPIO_readPort+0x82>
    1202:	2e 81       	ldd	r18, Y+6	; 0x06
    1204:	3f 81       	ldd	r19, Y+7	; 0x07
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	81 f0       	breq	.+32     	; 0x122c <GPIO_readPort+0x6e>
    120c:	8e 81       	ldd	r24, Y+6	; 0x06
    120e:	9f 81       	ldd	r25, Y+7	; 0x07
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	81 f0       	breq	.+32     	; 0x1236 <GPIO_readPort+0x78>
    1216:	14 c0       	rjmp	.+40     	; 0x1240 <GPIO_readPort+0x82>
        case PORTA_ID:
            pin_reg = &PINA;
    1218:	89 e3       	ldi	r24, 0x39	; 57
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	8a 83       	std	Y+2, r24	; 0x02
    1220:	12 c0       	rjmp	.+36     	; 0x1246 <GPIO_readPort+0x88>
            break;
        case PORTB_ID:
            pin_reg = &PINB;
    1222:	86 e3       	ldi	r24, 0x36	; 54
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	9b 83       	std	Y+3, r25	; 0x03
    1228:	8a 83       	std	Y+2, r24	; 0x02
    122a:	0d c0       	rjmp	.+26     	; 0x1246 <GPIO_readPort+0x88>
            break;
        case PORTC_ID:
            pin_reg = &PINC;
    122c:	83 e3       	ldi	r24, 0x33	; 51
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9b 83       	std	Y+3, r25	; 0x03
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	08 c0       	rjmp	.+16     	; 0x1246 <GPIO_readPort+0x88>
            break;
        case PORTD_ID:
            pin_reg = &PIND;
    1236:	80 e3       	ldi	r24, 0x30	; 48
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	9b 83       	std	Y+3, r25	; 0x03
    123c:	8a 83       	std	Y+2, r24	; 0x02
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <GPIO_readPort+0x88>
            break;
        default:
            return portValue; /* Invalid port number, return default value */
    1240:	99 81       	ldd	r25, Y+1	; 0x01
    1242:	9d 83       	std	Y+5, r25	; 0x05
    1244:	06 c0       	rjmp	.+12     	; 0x1252 <GPIO_readPort+0x94>
    }

    /* Read the value from the PIN register */
    portValue = *pin_reg;
    1246:	ea 81       	ldd	r30, Y+2	; 0x02
    1248:	fb 81       	ldd	r31, Y+3	; 0x03
    124a:	80 81       	ld	r24, Z
    124c:	89 83       	std	Y+1, r24	; 0x01

    return portValue;
    124e:	29 81       	ldd	r18, Y+1	; 0x01
    1250:	2d 83       	std	Y+5, r18	; 0x05
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1254:	27 96       	adiw	r28, 0x07	; 7
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <Enable_Global_Interrupt>:

/**
 * @brief Enables global interrupts.
 */
void Enable_Global_Interrupt()
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, Global_Interrupt_Enable);
    126e:	af e5       	ldi	r26, 0x5F	; 95
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	ef e5       	ldi	r30, 0x5F	; 95
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	80 68       	ori	r24, 0x80	; 128
    127a:	8c 93       	st	X, r24
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <Disable_Global_Interrupt>:

/**
 * @brief Disables global interrupts.
 */
void Disable_Global_Interrupt()
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(SREG, Global_Interrupt_Enable);
    128a:	af e5       	ldi	r26, 0x5F	; 95
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ef e5       	ldi	r30, 0x5F	; 95
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8f 77       	andi	r24, 0x7F	; 127
    1296:	8c 93       	st	X, r24
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <EXTI_EnableInterrupt>:
 * @brief Enables a specific external interrupt.
 *
 * @param[in] Line The interrupt line to enable (INT_0, INT_1, or INT_2).
 */
void EXTI_EnableInterrupt(uint8_t Line)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <EXTI_EnableInterrupt+0x6>
    12a4:	0f 92       	push	r0
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	89 83       	std	Y+1, r24	; 0x01
    switch(Line)
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	3b 83       	std	Y+3, r19	; 0x03
    12b4:	2a 83       	std	Y+2, r18	; 0x02
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	89 f0       	breq	.+34     	; 0x12e2 <EXTI_EnableInterrupt+0x44>
    12c0:	2a 81       	ldd	r18, Y+2	; 0x02
    12c2:	3b 81       	ldd	r19, Y+3	; 0x03
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	a1 f0       	breq	.+40     	; 0x12f2 <EXTI_EnableInterrupt+0x54>
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	9b 81       	ldd	r25, Y+3	; 0x03
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	b9 f4       	brne	.+46     	; 0x1300 <EXTI_EnableInterrupt+0x62>
    {
        case INT_0: SET_BIT(GICR, 6); break;
    12d2:	ab e5       	ldi	r26, 0x5B	; 91
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	eb e5       	ldi	r30, 0x5B	; 91
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	80 64       	ori	r24, 0x40	; 64
    12de:	8c 93       	st	X, r24
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <EXTI_EnableInterrupt+0x62>
        case INT_1: SET_BIT(GICR, 7); break;
    12e2:	ab e5       	ldi	r26, 0x5B	; 91
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	eb e5       	ldi	r30, 0x5B	; 91
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 68       	ori	r24, 0x80	; 128
    12ee:	8c 93       	st	X, r24
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <EXTI_EnableInterrupt+0x62>
        case INT_2: SET_BIT(GICR, 5); break;
    12f2:	ab e5       	ldi	r26, 0x5B	; 91
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	eb e5       	ldi	r30, 0x5B	; 91
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	80 62       	ori	r24, 0x20	; 32
    12fe:	8c 93       	st	X, r24
    }
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <EXTI_DisableInterrupt>:
 * @brief Disables a specific external interrupt.
 *
 * @param[in] Line The interrupt line to disable (INT_0, INT_1, or INT_2).
 */
void EXTI_DisableInterrupt(uint8_t Line)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <EXTI_DisableInterrupt+0x6>
    1312:	0f 92       	push	r0
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	89 83       	std	Y+1, r24	; 0x01
    switch(Line)
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	3b 83       	std	Y+3, r19	; 0x03
    1322:	2a 83       	std	Y+2, r18	; 0x02
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	9b 81       	ldd	r25, Y+3	; 0x03
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	91 05       	cpc	r25, r1
    132c:	89 f0       	breq	.+34     	; 0x1350 <EXTI_DisableInterrupt+0x44>
    132e:	2a 81       	ldd	r18, Y+2	; 0x02
    1330:	3b 81       	ldd	r19, Y+3	; 0x03
    1332:	22 30       	cpi	r18, 0x02	; 2
    1334:	31 05       	cpc	r19, r1
    1336:	a1 f0       	breq	.+40     	; 0x1360 <EXTI_DisableInterrupt+0x54>
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	9b 81       	ldd	r25, Y+3	; 0x03
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	b9 f4       	brne	.+46     	; 0x136e <EXTI_DisableInterrupt+0x62>
    {
        case INT_0: CLEAR_BIT(GICR, 6); break;
    1340:	ab e5       	ldi	r26, 0x5B	; 91
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	eb e5       	ldi	r30, 0x5B	; 91
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	8f 7b       	andi	r24, 0xBF	; 191
    134c:	8c 93       	st	X, r24
    134e:	0f c0       	rjmp	.+30     	; 0x136e <EXTI_DisableInterrupt+0x62>
        case INT_1: CLEAR_BIT(GICR, 7); break;
    1350:	ab e5       	ldi	r26, 0x5B	; 91
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	eb e5       	ldi	r30, 0x5B	; 91
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8f 77       	andi	r24, 0x7F	; 127
    135c:	8c 93       	st	X, r24
    135e:	07 c0       	rjmp	.+14     	; 0x136e <EXTI_DisableInterrupt+0x62>
        case INT_2: CLEAR_BIT(GICR, 5); break;
    1360:	ab e5       	ldi	r26, 0x5B	; 91
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	eb e5       	ldi	r30, 0x5B	; 91
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8f 7d       	andi	r24, 0xDF	; 223
    136c:	8c 93       	st	X, r24
    }
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <EXTI_SetSignalLatch>:
 * @brief Sets the signal latch for an external interrupt.
 *
 * @param[in] confg Pointer to the configuration structure for the external interrupt.
 */
void EXTI_SetSignalLatch(external_interruptConfiguration_t *confg)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <EXTI_SetSignalLatch+0x6>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	9a 83       	std	Y+2, r25	; 0x02
    1386:	89 83       	std	Y+1, r24	; 0x01
    if (confg->interrupt_channel == INT_0)
    1388:	e9 81       	ldd	r30, Y+1	; 0x01
    138a:	fa 81       	ldd	r31, Y+2	; 0x02
    138c:	80 81       	ld	r24, Z
    138e:	88 23       	and	r24, r24
    1390:	09 f0       	breq	.+2      	; 0x1394 <EXTI_SetSignalLatch+0x1a>
    1392:	51 c0       	rjmp	.+162    	; 0x1436 <EXTI_SetSignalLatch+0xbc>
    {
        if (confg->Sense_control == LOW_LEVEL)
    1394:	e9 81       	ldd	r30, Y+1	; 0x01
    1396:	fa 81       	ldd	r31, Y+2	; 0x02
    1398:	81 81       	ldd	r24, Z+1	; 0x01
    139a:	88 23       	and	r24, r24
    139c:	79 f4       	brne	.+30     	; 0x13bc <EXTI_SetSignalLatch+0x42>
        {
            CLEAR_BIT(MCUCR, ISC00);
    139e:	a5 e5       	ldi	r26, 0x55	; 85
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 e5       	ldi	r30, 0x55	; 85
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	8e 7f       	andi	r24, 0xFE	; 254
    13aa:	8c 93       	st	X, r24
            CLEAR_BIT(MCUCR, ISC01);
    13ac:	a5 e5       	ldi	r26, 0x55	; 85
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e5       	ldi	r30, 0x55	; 85
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8d 7f       	andi	r24, 0xFD	; 253
    13b8:	8c 93       	st	X, r24
    13ba:	b1 c0       	rjmp	.+354    	; 0x151e <EXTI_SetSignalLatch+0x1a4>
        }
        else if (confg->Sense_control == ANY_LOGICAL_CHANGE)
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	81 81       	ldd	r24, Z+1	; 0x01
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	79 f4       	brne	.+30     	; 0x13e4 <EXTI_SetSignalLatch+0x6a>
        {
            SET_BIT(MCUCR, ISC00);
    13c6:	a5 e5       	ldi	r26, 0x55	; 85
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e5 e5       	ldi	r30, 0x55	; 85
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	81 60       	ori	r24, 0x01	; 1
    13d2:	8c 93       	st	X, r24
            CLEAR_BIT(MCUCR, ISC01);
    13d4:	a5 e5       	ldi	r26, 0x55	; 85
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e5 e5       	ldi	r30, 0x55	; 85
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8d 7f       	andi	r24, 0xFD	; 253
    13e0:	8c 93       	st	X, r24
    13e2:	9d c0       	rjmp	.+314    	; 0x151e <EXTI_SetSignalLatch+0x1a4>
        }
        else if (confg->Sense_control == FALLING_EDGE)
    13e4:	e9 81       	ldd	r30, Y+1	; 0x01
    13e6:	fa 81       	ldd	r31, Y+2	; 0x02
    13e8:	81 81       	ldd	r24, Z+1	; 0x01
    13ea:	82 30       	cpi	r24, 0x02	; 2
    13ec:	79 f4       	brne	.+30     	; 0x140c <EXTI_SetSignalLatch+0x92>
        {
            CLEAR_BIT(MCUCR, ISC00);
    13ee:	a5 e5       	ldi	r26, 0x55	; 85
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e5 e5       	ldi	r30, 0x55	; 85
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	8e 7f       	andi	r24, 0xFE	; 254
    13fa:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    13fc:	a5 e5       	ldi	r26, 0x55	; 85
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e5 e5       	ldi	r30, 0x55	; 85
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	82 60       	ori	r24, 0x02	; 2
    1408:	8c 93       	st	X, r24
    140a:	89 c0       	rjmp	.+274    	; 0x151e <EXTI_SetSignalLatch+0x1a4>
        }
        else if (confg->Sense_control == RISING_EDGE)
    140c:	e9 81       	ldd	r30, Y+1	; 0x01
    140e:	fa 81       	ldd	r31, Y+2	; 0x02
    1410:	81 81       	ldd	r24, Z+1	; 0x01
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	09 f0       	breq	.+2      	; 0x1418 <EXTI_SetSignalLatch+0x9e>
    1416:	83 c0       	rjmp	.+262    	; 0x151e <EXTI_SetSignalLatch+0x1a4>
        {
            SET_BIT(MCUCR, ISC00);
    1418:	a5 e5       	ldi	r26, 0x55	; 85
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e5 e5       	ldi	r30, 0x55	; 85
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	81 60       	ori	r24, 0x01	; 1
    1424:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC01);
    1426:	a5 e5       	ldi	r26, 0x55	; 85
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e5 e5       	ldi	r30, 0x55	; 85
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	82 60       	ori	r24, 0x02	; 2
    1432:	8c 93       	st	X, r24
    1434:	74 c0       	rjmp	.+232    	; 0x151e <EXTI_SetSignalLatch+0x1a4>
        }
    }
    else if (confg->interrupt_channel == INT_1)
    1436:	e9 81       	ldd	r30, Y+1	; 0x01
    1438:	fa 81       	ldd	r31, Y+2	; 0x02
    143a:	80 81       	ld	r24, Z
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	09 f0       	breq	.+2      	; 0x1442 <EXTI_SetSignalLatch+0xc8>
    1440:	50 c0       	rjmp	.+160    	; 0x14e2 <EXTI_SetSignalLatch+0x168>
    {
        if (confg->Sense_control == LOW_LEVEL)
    1442:	e9 81       	ldd	r30, Y+1	; 0x01
    1444:	fa 81       	ldd	r31, Y+2	; 0x02
    1446:	81 81       	ldd	r24, Z+1	; 0x01
    1448:	88 23       	and	r24, r24
    144a:	79 f4       	brne	.+30     	; 0x146a <EXTI_SetSignalLatch+0xf0>
        {
            CLEAR_BIT(MCUCR, ISC10);
    144c:	a5 e5       	ldi	r26, 0x55	; 85
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e5 e5       	ldi	r30, 0x55	; 85
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8b 7f       	andi	r24, 0xFB	; 251
    1458:	8c 93       	st	X, r24
            CLEAR_BIT(MCUCR, ISC11);
    145a:	a5 e5       	ldi	r26, 0x55	; 85
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e5 e5       	ldi	r30, 0x55	; 85
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	87 7f       	andi	r24, 0xF7	; 247
    1466:	8c 93       	st	X, r24
    1468:	5a c0       	rjmp	.+180    	; 0x151e <EXTI_SetSignalLatch+0x1a4>
        }
        else if (confg->Sense_control == ANY_LOGICAL_CHANGE)
    146a:	e9 81       	ldd	r30, Y+1	; 0x01
    146c:	fa 81       	ldd	r31, Y+2	; 0x02
    146e:	81 81       	ldd	r24, Z+1	; 0x01
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	79 f4       	brne	.+30     	; 0x1492 <EXTI_SetSignalLatch+0x118>
        {
            SET_BIT(MCUCR, ISC10);
    1474:	a5 e5       	ldi	r26, 0x55	; 85
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e5 e5       	ldi	r30, 0x55	; 85
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	84 60       	ori	r24, 0x04	; 4
    1480:	8c 93       	st	X, r24
            CLEAR_BIT(MCUCR, ISC11);
    1482:	a5 e5       	ldi	r26, 0x55	; 85
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e5 e5       	ldi	r30, 0x55	; 85
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	87 7f       	andi	r24, 0xF7	; 247
    148e:	8c 93       	st	X, r24
    1490:	46 c0       	rjmp	.+140    	; 0x151e <EXTI_SetSignalLatch+0x1a4>
        }
        else if (confg->Sense_control == FALLING_EDGE)
    1492:	e9 81       	ldd	r30, Y+1	; 0x01
    1494:	fa 81       	ldd	r31, Y+2	; 0x02
    1496:	81 81       	ldd	r24, Z+1	; 0x01
    1498:	82 30       	cpi	r24, 0x02	; 2
    149a:	79 f4       	brne	.+30     	; 0x14ba <EXTI_SetSignalLatch+0x140>
        {
            CLEAR_BIT(MCUCR, ISC10);
    149c:	a5 e5       	ldi	r26, 0x55	; 85
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e5       	ldi	r30, 0x55	; 85
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8b 7f       	andi	r24, 0xFB	; 251
    14a8:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    14aa:	a5 e5       	ldi	r26, 0x55	; 85
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e5       	ldi	r30, 0x55	; 85
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	88 60       	ori	r24, 0x08	; 8
    14b6:	8c 93       	st	X, r24
    14b8:	32 c0       	rjmp	.+100    	; 0x151e <EXTI_SetSignalLatch+0x1a4>
        }
        else if (confg->Sense_control == RISING_EDGE)
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	81 81       	ldd	r24, Z+1	; 0x01
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	69 f5       	brne	.+90     	; 0x151e <EXTI_SetSignalLatch+0x1a4>
        {
            SET_BIT(MCUCR, ISC10);
    14c4:	a5 e5       	ldi	r26, 0x55	; 85
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e5 e5       	ldi	r30, 0x55	; 85
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	84 60       	ori	r24, 0x04	; 4
    14d0:	8c 93       	st	X, r24
            SET_BIT(MCUCR, ISC11);
    14d2:	a5 e5       	ldi	r26, 0x55	; 85
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e5 e5       	ldi	r30, 0x55	; 85
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	88 60       	ori	r24, 0x08	; 8
    14de:	8c 93       	st	X, r24
    14e0:	1e c0       	rjmp	.+60     	; 0x151e <EXTI_SetSignalLatch+0x1a4>
        }
    }
    else if (confg->interrupt_channel == INT_2)
    14e2:	e9 81       	ldd	r30, Y+1	; 0x01
    14e4:	fa 81       	ldd	r31, Y+2	; 0x02
    14e6:	80 81       	ld	r24, Z
    14e8:	82 30       	cpi	r24, 0x02	; 2
    14ea:	c9 f4       	brne	.+50     	; 0x151e <EXTI_SetSignalLatch+0x1a4>
    {
        if (confg->Sense_control == FALLING_EDGE)
    14ec:	e9 81       	ldd	r30, Y+1	; 0x01
    14ee:	fa 81       	ldd	r31, Y+2	; 0x02
    14f0:	81 81       	ldd	r24, Z+1	; 0x01
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	41 f4       	brne	.+16     	; 0x1506 <EXTI_SetSignalLatch+0x18c>
        {
            CLEAR_BIT(MCUCSR, ISC2);
    14f6:	a4 e5       	ldi	r26, 0x54	; 84
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e4 e5       	ldi	r30, 0x54	; 84
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8f 7b       	andi	r24, 0xBF	; 191
    1502:	8c 93       	st	X, r24
    1504:	0c c0       	rjmp	.+24     	; 0x151e <EXTI_SetSignalLatch+0x1a4>
        }
        else if (confg->Sense_control == RISING_EDGE)
    1506:	e9 81       	ldd	r30, Y+1	; 0x01
    1508:	fa 81       	ldd	r31, Y+2	; 0x02
    150a:	81 81       	ldd	r24, Z+1	; 0x01
    150c:	83 30       	cpi	r24, 0x03	; 3
    150e:	39 f4       	brne	.+14     	; 0x151e <EXTI_SetSignalLatch+0x1a4>
        {
            SET_BIT(MCUCSR, ISC2);
    1510:	a4 e5       	ldi	r26, 0x54	; 84
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e4 e5       	ldi	r30, 0x54	; 84
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	80 64       	ori	r24, 0x40	; 64
    151c:	8c 93       	st	X, r24
        }
    }
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <EXTI_FlagStatus>:
 *
 * @param[in] confg Pointer to the configuration structure for the external interrupt.
 * @param[out] state Pointer to the variable where the flag status will be stored.
 */
void EXTI_FlagStatus(external_interruptConfiguration_t *confg, uint8_t *state)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <EXTI_FlagStatus+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <EXTI_FlagStatus+0x8>
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	9a 83       	std	Y+2, r25	; 0x02
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	7c 83       	std	Y+4, r23	; 0x04
    153a:	6b 83       	std	Y+3, r22	; 0x03
    if (confg->interrupt_channel == INT_0)
    153c:	e9 81       	ldd	r30, Y+1	; 0x01
    153e:	fa 81       	ldd	r31, Y+2	; 0x02
    1540:	80 81       	ld	r24, Z
    1542:	88 23       	and	r24, r24
    1544:	61 f4       	brne	.+24     	; 0x155e <EXTI_FlagStatus+0x36>
    {
        *state = READ_BIT(GIFR, 6);
    1546:	ea e5       	ldi	r30, 0x5A	; 90
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	82 95       	swap	r24
    154e:	86 95       	lsr	r24
    1550:	86 95       	lsr	r24
    1552:	83 70       	andi	r24, 0x03	; 3
    1554:	81 70       	andi	r24, 0x01	; 1
    1556:	eb 81       	ldd	r30, Y+3	; 0x03
    1558:	fc 81       	ldd	r31, Y+4	; 0x04
    155a:	80 83       	st	Z, r24
    155c:	1e c0       	rjmp	.+60     	; 0x159a <EXTI_FlagStatus+0x72>
    }
    else if (confg->interrupt_channel == INT_1)
    155e:	e9 81       	ldd	r30, Y+1	; 0x01
    1560:	fa 81       	ldd	r31, Y+2	; 0x02
    1562:	80 81       	ld	r24, Z
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	51 f4       	brne	.+20     	; 0x157c <EXTI_FlagStatus+0x54>
    {
        *state = READ_BIT(GIFR, 7);
    1568:	ea e5       	ldi	r30, 0x5A	; 90
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	88 1f       	adc	r24, r24
    1570:	88 27       	eor	r24, r24
    1572:	88 1f       	adc	r24, r24
    1574:	eb 81       	ldd	r30, Y+3	; 0x03
    1576:	fc 81       	ldd	r31, Y+4	; 0x04
    1578:	80 83       	st	Z, r24
    157a:	0f c0       	rjmp	.+30     	; 0x159a <EXTI_FlagStatus+0x72>
    }
    else if (confg->interrupt_channel == INT_2)
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	80 81       	ld	r24, Z
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	51 f4       	brne	.+20     	; 0x159a <EXTI_FlagStatus+0x72>
    {
        *state = READ_BIT(GIFR, 5);
    1586:	ea e5       	ldi	r30, 0x5A	; 90
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	82 95       	swap	r24
    158e:	86 95       	lsr	r24
    1590:	87 70       	andi	r24, 0x07	; 7
    1592:	81 70       	andi	r24, 0x01	; 1
    1594:	eb 81       	ldd	r30, Y+3	; 0x03
    1596:	fc 81       	ldd	r31, Y+4	; 0x04
    1598:	80 83       	st	Z, r24
    }
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <EXTI_ClearFlag>:
 * @brief Clears an interrupt flag.
 *
 * @param[in] interrupt_channel The interrupt channel to clear (INT_0, INT_1, or INT_2).
 */
void EXTI_ClearFlag(uint8_t interrupt_channel)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	89 83       	std	Y+1, r24	; 0x01
    if (interrupt_channel == INT_0)
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	88 23       	and	r24, r24
    15b8:	41 f4       	brne	.+16     	; 0x15ca <EXTI_ClearFlag+0x22>
    {
        SET_BIT(GIFR, 6);
    15ba:	aa e5       	ldi	r26, 0x5A	; 90
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	ea e5       	ldi	r30, 0x5A	; 90
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	80 64       	ori	r24, 0x40	; 64
    15c6:	8c 93       	st	X, r24
    15c8:	15 c0       	rjmp	.+42     	; 0x15f4 <EXTI_ClearFlag+0x4c>
    }
    else if (interrupt_channel == INT_1)
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	41 f4       	brne	.+16     	; 0x15e0 <EXTI_ClearFlag+0x38>
    {
        SET_BIT(GIFR, 7);
    15d0:	aa e5       	ldi	r26, 0x5A	; 90
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	ea e5       	ldi	r30, 0x5A	; 90
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	80 68       	ori	r24, 0x80	; 128
    15dc:	8c 93       	st	X, r24
    15de:	0a c0       	rjmp	.+20     	; 0x15f4 <EXTI_ClearFlag+0x4c>
    }
    else if (interrupt_channel == INT_2)
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	39 f4       	brne	.+14     	; 0x15f4 <EXTI_ClearFlag+0x4c>
    {
        SET_BIT(GIFR, 5);
    15e6:	aa e5       	ldi	r26, 0x5A	; 90
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ea e5       	ldi	r30, 0x5A	; 90
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 62       	ori	r24, 0x20	; 32
    15f2:	8c 93       	st	X, r24
    }
}
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <EXTI_voidSetCallBack>:
 *
 * @param[in] Copy_pvoidCallBack Pointer to the callback function.
 * @param[in] confg Pointer to the configuration structure for the external interrupt.
 */
void EXTI_voidSetCallBack(void (*Copy_pvoidCallBack)(void), external_interruptConfiguration_t *confg)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	00 d0       	rcall	.+0      	; 0x1602 <EXTI_voidSetCallBack+0x6>
    1602:	00 d0       	rcall	.+0      	; 0x1604 <EXTI_voidSetCallBack+0x8>
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	7c 83       	std	Y+4, r23	; 0x04
    160e:	6b 83       	std	Y+3, r22	; 0x03
    if(Copy_pvoidCallBack != NULL)
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	71 f0       	breq	.+28     	; 0x1634 <EXTI_voidSetCallBack+0x38>
    {
        EXTI_CallBack[confg->interrupt_channel] = Copy_pvoidCallBack;
    1618:	eb 81       	ldd	r30, Y+3	; 0x03
    161a:	fc 81       	ldd	r31, Y+4	; 0x04
    161c:	80 81       	ld	r24, Z
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	fc 01       	movw	r30, r24
    1628:	e8 59       	subi	r30, 0x98	; 152
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	80 83       	st	Z, r24
    }
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <__vector_1>:

/**
 * @brief Interrupt service routine for INT0.
 */
void __vector_1(void)
{
    1642:	1f 92       	push	r1
    1644:	0f 92       	push	r0
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	0f 92       	push	r0
    164a:	11 24       	eor	r1, r1
    164c:	2f 93       	push	r18
    164e:	3f 93       	push	r19
    1650:	4f 93       	push	r20
    1652:	5f 93       	push	r21
    1654:	6f 93       	push	r22
    1656:	7f 93       	push	r23
    1658:	8f 93       	push	r24
    165a:	9f 93       	push	r25
    165c:	af 93       	push	r26
    165e:	bf 93       	push	r27
    1660:	ef 93       	push	r30
    1662:	ff 93       	push	r31
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_CallBack[0] != NULL)
    166c:	80 91 68 00 	lds	r24, 0x0068
    1670:	90 91 69 00 	lds	r25, 0x0069
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	41 f0       	breq	.+16     	; 0x1688 <__vector_1+0x46>
    {
        EXTI_CallBack[0]();
    1678:	e0 91 68 00 	lds	r30, 0x0068
    167c:	f0 91 69 00 	lds	r31, 0x0069
    1680:	09 95       	icall
        EXTI_ClearFlag(INT_0);
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <EXTI_ClearFlag>
    }
}
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	ff 91       	pop	r31
    168e:	ef 91       	pop	r30
    1690:	bf 91       	pop	r27
    1692:	af 91       	pop	r26
    1694:	9f 91       	pop	r25
    1696:	8f 91       	pop	r24
    1698:	7f 91       	pop	r23
    169a:	6f 91       	pop	r22
    169c:	5f 91       	pop	r21
    169e:	4f 91       	pop	r20
    16a0:	3f 91       	pop	r19
    16a2:	2f 91       	pop	r18
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	0f 90       	pop	r0
    16aa:	1f 90       	pop	r1
    16ac:	18 95       	reti

000016ae <__vector_2>:

/**
 * @brief Interrupt service routine for INT1.
 */
void __vector_2(void)
{
    16ae:	1f 92       	push	r1
    16b0:	0f 92       	push	r0
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	0f 92       	push	r0
    16b6:	11 24       	eor	r1, r1
    16b8:	2f 93       	push	r18
    16ba:	3f 93       	push	r19
    16bc:	4f 93       	push	r20
    16be:	5f 93       	push	r21
    16c0:	6f 93       	push	r22
    16c2:	7f 93       	push	r23
    16c4:	8f 93       	push	r24
    16c6:	9f 93       	push	r25
    16c8:	af 93       	push	r26
    16ca:	bf 93       	push	r27
    16cc:	ef 93       	push	r30
    16ce:	ff 93       	push	r31
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_CallBack[1] != NULL)
    16d8:	80 91 6a 00 	lds	r24, 0x006A
    16dc:	90 91 6b 00 	lds	r25, 0x006B
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	41 f0       	breq	.+16     	; 0x16f4 <__vector_2+0x46>
    {
        EXTI_CallBack[1]();
    16e4:	e0 91 6a 00 	lds	r30, 0x006A
    16e8:	f0 91 6b 00 	lds	r31, 0x006B
    16ec:	09 95       	icall
        EXTI_ClearFlag(INT_1);
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <EXTI_ClearFlag>
    }
}
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	ff 91       	pop	r31
    16fa:	ef 91       	pop	r30
    16fc:	bf 91       	pop	r27
    16fe:	af 91       	pop	r26
    1700:	9f 91       	pop	r25
    1702:	8f 91       	pop	r24
    1704:	7f 91       	pop	r23
    1706:	6f 91       	pop	r22
    1708:	5f 91       	pop	r21
    170a:	4f 91       	pop	r20
    170c:	3f 91       	pop	r19
    170e:	2f 91       	pop	r18
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	0f 90       	pop	r0
    1716:	1f 90       	pop	r1
    1718:	18 95       	reti

0000171a <__vector_3>:

/**
 * @brief Interrupt service routine for INT2.
 */
void __vector_3(void)
{
    171a:	1f 92       	push	r1
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	0f 92       	push	r0
    1722:	11 24       	eor	r1, r1
    1724:	2f 93       	push	r18
    1726:	3f 93       	push	r19
    1728:	4f 93       	push	r20
    172a:	5f 93       	push	r21
    172c:	6f 93       	push	r22
    172e:	7f 93       	push	r23
    1730:	8f 93       	push	r24
    1732:	9f 93       	push	r25
    1734:	af 93       	push	r26
    1736:	bf 93       	push	r27
    1738:	ef 93       	push	r30
    173a:	ff 93       	push	r31
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_CallBack[2] != NULL)
    1744:	80 91 6c 00 	lds	r24, 0x006C
    1748:	90 91 6d 00 	lds	r25, 0x006D
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	41 f0       	breq	.+16     	; 0x1760 <__vector_3+0x46>
    {
        EXTI_CallBack[2]();
    1750:	e0 91 6c 00 	lds	r30, 0x006C
    1754:	f0 91 6d 00 	lds	r31, 0x006D
    1758:	09 95       	icall
        EXTI_ClearFlag(INT_2);
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <EXTI_ClearFlag>
    }
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	bf 91       	pop	r27
    176a:	af 91       	pop	r26
    176c:	9f 91       	pop	r25
    176e:	8f 91       	pop	r24
    1770:	7f 91       	pop	r23
    1772:	6f 91       	pop	r22
    1774:	5f 91       	pop	r21
    1776:	4f 91       	pop	r20
    1778:	3f 91       	pop	r19
    177a:	2f 91       	pop	r18
    177c:	0f 90       	pop	r0
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	0f 90       	pop	r0
    1782:	1f 90       	pop	r1
    1784:	18 95       	reti

00001786 <SPI_VoidInit>:
 *       Section: Functions Implementation
 *******************************************/

void SPI_VoidInit(SPI_Enable spi_enable, SPI_Mode MasterSlaveMode,SPI_DataOrder dataOrder, SPI_InterruptEnable spi_interruptEnable)

{
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <SPI_VoidInit+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <SPI_VoidInit+0x8>
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	6a 83       	std	Y+2, r22	; 0x02
    1796:	4b 83       	std	Y+3, r20	; 0x03
    1798:	2c 83       	std	Y+4, r18	; 0x04
	/**
	 * @brief spi enable.
	 */

	if (spi_enable == SPI_ENABLE)
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	41 f4       	brne	.+16     	; 0x17b0 <SPI_VoidInit+0x2a>
		SET_BIT(SPCR, SPE);
    17a0:	ad e2       	ldi	r26, 0x2D	; 45
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	ed e2       	ldi	r30, 0x2D	; 45
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 64       	ori	r24, 0x40	; 64
    17ac:	8c 93       	st	X, r24
    17ae:	0a c0       	rjmp	.+20     	; 0x17c4 <SPI_VoidInit+0x3e>
	else if (spi_enable == SPI_DISABLE)
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	88 23       	and	r24, r24
    17b4:	39 f4       	brne	.+14     	; 0x17c4 <SPI_VoidInit+0x3e>
		CLEAR_BIT(SPCR, SPE);
    17b6:	ad e2       	ldi	r26, 0x2D	; 45
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	ed e2       	ldi	r30, 0x2D	; 45
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	8f 7b       	andi	r24, 0xBF	; 191
    17c2:	8c 93       	st	X, r24

	/**
	 * @brief Selcting master or slave mode.
	 */
	if (MasterSlaveMode == SPI_MASTER)
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	88 23       	and	r24, r24
    17c8:	41 f4       	brne	.+16     	; 0x17da <SPI_VoidInit+0x54>
		SET_BIT(SPCR, MSTR);
    17ca:	ad e2       	ldi	r26, 0x2D	; 45
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	ed e2       	ldi	r30, 0x2D	; 45
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	80 61       	ori	r24, 0x10	; 16
    17d6:	8c 93       	st	X, r24
    17d8:	0a c0       	rjmp	.+20     	; 0x17ee <SPI_VoidInit+0x68>
	else if (MasterSlaveMode == SPI_SLAVE)
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	39 f4       	brne	.+14     	; 0x17ee <SPI_VoidInit+0x68>
		CLEAR_BIT(SPCR, MSTR);
    17e0:	ad e2       	ldi	r26, 0x2D	; 45
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	ed e2       	ldi	r30, 0x2D	; 45
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	8f 7e       	andi	r24, 0xEF	; 239
    17ec:	8c 93       	st	X, r24

	/**
	 * @brief Selcting Data order.
	 */

	if (dataOrder == SPI_DATA_LSB_FIRST)
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	88 23       	and	r24, r24
    17f2:	41 f4       	brne	.+16     	; 0x1804 <SPI_VoidInit+0x7e>
		SET_BIT(SPCR, DORD);
    17f4:	ad e2       	ldi	r26, 0x2D	; 45
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	ed e2       	ldi	r30, 0x2D	; 45
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	80 62       	ori	r24, 0x20	; 32
    1800:	8c 93       	st	X, r24
    1802:	0a c0       	rjmp	.+20     	; 0x1818 <SPI_VoidInit+0x92>
	else if (dataOrder == SPI_DATA_MSP_FIRST)
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	39 f4       	brne	.+14     	; 0x1818 <SPI_VoidInit+0x92>
		CLEAR_BIT(SPCR, DORD);
    180a:	ad e2       	ldi	r26, 0x2D	; 45
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	ed e2       	ldi	r30, 0x2D	; 45
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8f 7d       	andi	r24, 0xDF	; 223
    1816:	8c 93       	st	X, r24

	/** 
	 * @brief spi interrupt_enable.
	 */

	if (spi_interruptEnable == SPI_INTERRUPT_ENABLE)
    1818:	8c 81       	ldd	r24, Y+4	; 0x04
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	41 f4       	brne	.+16     	; 0x182e <SPI_VoidInit+0xa8>
		SET_BIT(SPCR, SPIE);
    181e:	ad e2       	ldi	r26, 0x2D	; 45
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	ed e2       	ldi	r30, 0x2D	; 45
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	80 68       	ori	r24, 0x80	; 128
    182a:	8c 93       	st	X, r24
    182c:	0a c0       	rjmp	.+20     	; 0x1842 <SPI_VoidInit+0xbc>
	else if (spi_enable == SPI_INTERRUPT_DISABLE)
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	88 23       	and	r24, r24
    1832:	39 f4       	brne	.+14     	; 0x1842 <SPI_VoidInit+0xbc>
		CLEAR_BIT(SPCR, SPIE);
    1834:	ad e2       	ldi	r26, 0x2D	; 45
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	ed e2       	ldi	r30, 0x2D	; 45
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	8f 77       	andi	r24, 0x7F	; 127
    1840:	8c 93       	st	X, r24
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <SPI_CLK_VoidInit>:

//********************************************************************************************************************************

void SPI_CLK_VoidInit(SPI_ClockPolarity clkPriority, SPI_ClockPhase ClkPhase,
		SPI_ClockRate ClkRate) {
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <SPI_CLK_VoidInit+0x6>
    1856:	00 d0       	rcall	.+0      	; 0x1858 <SPI_CLK_VoidInit+0x8>
    1858:	0f 92       	push	r0
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	6a 83       	std	Y+2, r22	; 0x02
    1862:	4b 83       	std	Y+3, r20	; 0x03

	/**
	 * @brief SET ClockPriority.
	 */

	if (clkPriority == SPI_RISING_LEADING_FALLING_TRAILING)
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	88 23       	and	r24, r24
    1868:	41 f4       	brne	.+16     	; 0x187a <SPI_CLK_VoidInit+0x2a>
		SET_BIT(SPCR, CPOL);
    186a:	ad e2       	ldi	r26, 0x2D	; 45
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	ed e2       	ldi	r30, 0x2D	; 45
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	88 60       	ori	r24, 0x08	; 8
    1876:	8c 93       	st	X, r24
    1878:	0a c0       	rjmp	.+20     	; 0x188e <SPI_CLK_VoidInit+0x3e>
	else if (clkPriority == SPI_FALLING_LEADING_RISING_TRAILING)
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	39 f4       	brne	.+14     	; 0x188e <SPI_CLK_VoidInit+0x3e>
		CLEAR_BIT(SPCR, CPOL);
    1880:	ad e2       	ldi	r26, 0x2D	; 45
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	ed e2       	ldi	r30, 0x2D	; 45
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	87 7f       	andi	r24, 0xF7	; 247
    188c:	8c 93       	st	X, r24

	/** 
	 * @brief SET ClockPhase
	 */

	if (ClkPhase == SPI_SAMPLE_LEADING_SETUP_TRAILING)
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	88 23       	and	r24, r24
    1892:	41 f4       	brne	.+16     	; 0x18a4 <SPI_CLK_VoidInit+0x54>
		SET_BIT(SPCR, CPHA);
    1894:	ad e2       	ldi	r26, 0x2D	; 45
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ed e2       	ldi	r30, 0x2D	; 45
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	84 60       	ori	r24, 0x04	; 4
    18a0:	8c 93       	st	X, r24
    18a2:	0a c0       	rjmp	.+20     	; 0x18b8 <SPI_CLK_VoidInit+0x68>
	else if (ClkPhase == SPI_SETUP_LEADING_SAMPLE_TRAILING)
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	39 f4       	brne	.+14     	; 0x18b8 <SPI_CLK_VoidInit+0x68>
		CLEAR_BIT(SPCR, CPHA);
    18aa:	ad e2       	ldi	r26, 0x2D	; 45
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	ed e2       	ldi	r30, 0x2D	; 45
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	8b 7f       	andi	r24, 0xFB	; 251
    18b6:	8c 93       	st	X, r24

	/**
	 * @brief SET ClockRate
	 */

	switch (ClkRate) {
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	3d 83       	std	Y+5, r19	; 0x05
    18c0:	2c 83       	std	Y+4, r18	; 0x04
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	83 30       	cpi	r24, 0x03	; 3
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <SPI_CLK_VoidInit+0x7e>
    18cc:	6a c0       	rjmp	.+212    	; 0x19a2 <SPI_CLK_VoidInit+0x152>
    18ce:	2c 81       	ldd	r18, Y+4	; 0x04
    18d0:	3d 81       	ldd	r19, Y+5	; 0x05
    18d2:	24 30       	cpi	r18, 0x04	; 4
    18d4:	31 05       	cpc	r19, r1
    18d6:	84 f4       	brge	.+32     	; 0x18f8 <SPI_CLK_VoidInit+0xa8>
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	9d 81       	ldd	r25, Y+5	; 0x05
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	91 05       	cpc	r25, r1
    18e0:	a1 f1       	breq	.+104    	; 0x194a <SPI_CLK_VoidInit+0xfa>
    18e2:	2c 81       	ldd	r18, Y+4	; 0x04
    18e4:	3d 81       	ldd	r19, Y+5	; 0x05
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	0c f0       	brlt	.+2      	; 0x18ee <SPI_CLK_VoidInit+0x9e>
    18ec:	44 c0       	rjmp	.+136    	; 0x1976 <SPI_CLK_VoidInit+0x126>
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	9d 81       	ldd	r25, Y+5	; 0x05
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	a1 f0       	breq	.+40     	; 0x191e <SPI_CLK_VoidInit+0xce>
    18f6:	ac c0       	rjmp	.+344    	; 0x1a50 <SPI_CLK_VoidInit+0x200>
    18f8:	2c 81       	ldd	r18, Y+4	; 0x04
    18fa:	3d 81       	ldd	r19, Y+5	; 0x05
    18fc:	25 30       	cpi	r18, 0x05	; 5
    18fe:	31 05       	cpc	r19, r1
    1900:	09 f4       	brne	.+2      	; 0x1904 <SPI_CLK_VoidInit+0xb4>
    1902:	7b c0       	rjmp	.+246    	; 0x19fa <SPI_CLK_VoidInit+0x1aa>
    1904:	8c 81       	ldd	r24, Y+4	; 0x04
    1906:	9d 81       	ldd	r25, Y+5	; 0x05
    1908:	85 30       	cpi	r24, 0x05	; 5
    190a:	91 05       	cpc	r25, r1
    190c:	0c f4       	brge	.+2      	; 0x1910 <SPI_CLK_VoidInit+0xc0>
    190e:	5f c0       	rjmp	.+190    	; 0x19ce <SPI_CLK_VoidInit+0x17e>
    1910:	2c 81       	ldd	r18, Y+4	; 0x04
    1912:	3d 81       	ldd	r19, Y+5	; 0x05
    1914:	26 30       	cpi	r18, 0x06	; 6
    1916:	31 05       	cpc	r19, r1
    1918:	09 f4       	brne	.+2      	; 0x191c <SPI_CLK_VoidInit+0xcc>
    191a:	85 c0       	rjmp	.+266    	; 0x1a26 <SPI_CLK_VoidInit+0x1d6>
    191c:	99 c0       	rjmp	.+306    	; 0x1a50 <SPI_CLK_VoidInit+0x200>

	case SPI_FREQ_DIVIDED_BY_2:

		CLEAR_BIT(SPCR, SPR0);
    191e:	ad e2       	ldi	r26, 0x2D	; 45
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ed e2       	ldi	r30, 0x2D	; 45
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	8e 7f       	andi	r24, 0xFE	; 254
    192a:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, SPR1);
    192c:	ad e2       	ldi	r26, 0x2D	; 45
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	ed e2       	ldi	r30, 0x2D	; 45
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8d 7f       	andi	r24, 0xFD	; 253
    1938:	8c 93       	st	X, r24
		SET_BIT(SPSR, SPI2X);
    193a:	ae e2       	ldi	r26, 0x2E	; 46
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	ee e2       	ldi	r30, 0x2E	; 46
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	81 60       	ori	r24, 0x01	; 1
    1946:	8c 93       	st	X, r24
    1948:	83 c0       	rjmp	.+262    	; 0x1a50 <SPI_CLK_VoidInit+0x200>
		break;

	case SPI_FREQ_DIVIDED_BY_4:

		CLEAR_BIT(SPCR, SPR0);
    194a:	ad e2       	ldi	r26, 0x2D	; 45
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	ed e2       	ldi	r30, 0x2D	; 45
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	8e 7f       	andi	r24, 0xFE	; 254
    1956:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, SPR1);
    1958:	ad e2       	ldi	r26, 0x2D	; 45
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	ed e2       	ldi	r30, 0x2D	; 45
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8d 7f       	andi	r24, 0xFD	; 253
    1964:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR, SPI2X);
    1966:	ae e2       	ldi	r26, 0x2E	; 46
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	ee e2       	ldi	r30, 0x2E	; 46
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	8e 7f       	andi	r24, 0xFE	; 254
    1972:	8c 93       	st	X, r24
    1974:	6d c0       	rjmp	.+218    	; 0x1a50 <SPI_CLK_VoidInit+0x200>
		break;

	case SPI_FREQ_DIVIDED_BY_8:

		SET_BIT(SPCR, SPR0);
    1976:	ad e2       	ldi	r26, 0x2D	; 45
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	ed e2       	ldi	r30, 0x2D	; 45
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	81 60       	ori	r24, 0x01	; 1
    1982:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, SPR1);
    1984:	ad e2       	ldi	r26, 0x2D	; 45
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	ed e2       	ldi	r30, 0x2D	; 45
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8d 7f       	andi	r24, 0xFD	; 253
    1990:	8c 93       	st	X, r24
		SET_BIT(SPSR, SPI2X);
    1992:	ae e2       	ldi	r26, 0x2E	; 46
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ee e2       	ldi	r30, 0x2E	; 46
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	81 60       	ori	r24, 0x01	; 1
    199e:	8c 93       	st	X, r24
    19a0:	57 c0       	rjmp	.+174    	; 0x1a50 <SPI_CLK_VoidInit+0x200>
		break;

	case SPI_FREQ_DIVIDED_BY_16:

		SET_BIT(SPCR, SPR0);
    19a2:	ad e2       	ldi	r26, 0x2D	; 45
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	ed e2       	ldi	r30, 0x2D	; 45
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	81 60       	ori	r24, 0x01	; 1
    19ae:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, SPR1);
    19b0:	ad e2       	ldi	r26, 0x2D	; 45
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ed e2       	ldi	r30, 0x2D	; 45
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	8d 7f       	andi	r24, 0xFD	; 253
    19bc:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR, SPI2X);
    19be:	ae e2       	ldi	r26, 0x2E	; 46
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	ee e2       	ldi	r30, 0x2E	; 46
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	8e 7f       	andi	r24, 0xFE	; 254
    19ca:	8c 93       	st	X, r24
    19cc:	41 c0       	rjmp	.+130    	; 0x1a50 <SPI_CLK_VoidInit+0x200>
		break;

	case SPI_FREQ_DIVIDED_BY_32:
		CLEAR_BIT(SPCR, SPR0);
    19ce:	ad e2       	ldi	r26, 0x2D	; 45
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ed e2       	ldi	r30, 0x2D	; 45
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8e 7f       	andi	r24, 0xFE	; 254
    19da:	8c 93       	st	X, r24
		SET_BIT(SPCR, SPR1);
    19dc:	ad e2       	ldi	r26, 0x2D	; 45
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	ed e2       	ldi	r30, 0x2D	; 45
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	82 60       	ori	r24, 0x02	; 2
    19e8:	8c 93       	st	X, r24
		SET_BIT(SPSR, SPI2X);
    19ea:	ae e2       	ldi	r26, 0x2E	; 46
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	ee e2       	ldi	r30, 0x2E	; 46
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	81 60       	ori	r24, 0x01	; 1
    19f6:	8c 93       	st	X, r24
    19f8:	2b c0       	rjmp	.+86     	; 0x1a50 <SPI_CLK_VoidInit+0x200>
		break;

	case SPI_FREQ_DIVIDED_BY_64:

		CLEAR_BIT(SPCR, SPR0);
    19fa:	ad e2       	ldi	r26, 0x2D	; 45
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	ed e2       	ldi	r30, 0x2D	; 45
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	8e 7f       	andi	r24, 0xFE	; 254
    1a06:	8c 93       	st	X, r24
		SET_BIT(SPCR, SPR1);
    1a08:	ad e2       	ldi	r26, 0x2D	; 45
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ed e2       	ldi	r30, 0x2D	; 45
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	82 60       	ori	r24, 0x02	; 2
    1a14:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR, SPI2X);
    1a16:	ae e2       	ldi	r26, 0x2E	; 46
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	ee e2       	ldi	r30, 0x2E	; 46
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	8e 7f       	andi	r24, 0xFE	; 254
    1a22:	8c 93       	st	X, r24
    1a24:	15 c0       	rjmp	.+42     	; 0x1a50 <SPI_CLK_VoidInit+0x200>
		break;

	case SPI_FREQ_DIVIDED_BY_128:

		SET_BIT(SPCR, SPR0);
    1a26:	ad e2       	ldi	r26, 0x2D	; 45
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	ed e2       	ldi	r30, 0x2D	; 45
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	81 60       	ori	r24, 0x01	; 1
    1a32:	8c 93       	st	X, r24
		SET_BIT(SPCR, SPR1);
    1a34:	ad e2       	ldi	r26, 0x2D	; 45
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	ed e2       	ldi	r30, 0x2D	; 45
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	82 60       	ori	r24, 0x02	; 2
    1a40:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR, SPI2X);
    1a42:	ae e2       	ldi	r26, 0x2E	; 46
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	ee e2       	ldi	r30, 0x2E	; 46
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8e 7f       	andi	r24, 0xFE	; 254
    1a4e:	8c 93       	st	X, r24
		break;

	}
}
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <SPI_uint8_tTranceive>:

//********************************************************************************************************************************

SPI_State SPI_uint8_tTranceive(uint8_t CopyData, uint8_t *RCopyData) {
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <SPI_uint8_tTranceive+0x6>
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <SPI_uint8_tTranceive+0x8>
    1a68:	0f 92       	push	r0
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
    1a70:	7d 83       	std	Y+5, r23	; 0x05
    1a72:	6c 83       	std	Y+4, r22	; 0x04

	SPI_State Local_u8ErrorState = OK;
    1a74:	1a 82       	std	Y+2, r1	; 0x02

	uint8_t Local_uint32TimeoutCounter = 0;
    1a76:	19 82       	std	Y+1, r1	; 0x01

	/* Check if SPI is idle */
	if (SPIState == IDLE) {
    1a78:	80 91 6e 00 	lds	r24, 0x006E
    1a7c:	88 23       	and	r24, r24
    1a7e:	f9 f4       	brne	.+62     	; 0x1abe <SPI_uint8_tTranceive+0x5e>
		/* Set SPI state to busy */
		SPIState = BUSY;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	80 93 6e 00 	sts	0x006E, r24

		/* Load data into SPI Data Register */
		SPDR = CopyData;
    1a86:	ef e2       	ldi	r30, 0x2F	; 47
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	80 83       	st	Z, r24

		/* Wait for SPI transfer to complete or timeout */
		while (((GET_BIT(SPSR, SPIF)) == 0)
    1a8e:	ee e2       	ldi	r30, 0x2E	; 46
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	88 1f       	adc	r24, r24
    1a96:	88 27       	eor	r24, r24
    1a98:	88 1f       	adc	r24, r24
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	90 70       	andi	r25, 0x00	; 0
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	21 f4       	brne	.+8      	; 0x1aac <SPI_uint8_tTranceive+0x4c>
				&& (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT)) {
			Local_uint32TimeoutCounter++;
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	8f 5f       	subi	r24, 0xFF	; 255
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	f1 cf       	rjmp	.-30     	; 0x1a8e <SPI_uint8_tTranceive+0x2e>
		/* Check if timeout occurred */
		if (Local_uint32TimeoutCounter == SPI_uint32TIMEOUT) {
			Local_u8ErrorState = OK; /* Handle timeout error if needed */
		} else {
			/* Retrieve received data from SPI Data Register */
			*RCopyData = SPDR;
    1aac:	ef e2       	ldi	r30, 0x2F	; 47
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ab4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ab6:	80 83       	st	Z, r24
		}

		/* Set SPI state back to idle */
		SPIState = IDLE;
    1ab8:	10 92 6e 00 	sts	0x006E, r1
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <SPI_uint8_tTranceive+0x62>
	} else {
		/* SPI is busy */
		Local_u8ErrorState = BUSY;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <SPI_BufferTranceiverSynch>:

//********************************************************************************************************************************

SPI_State SPI_BufferTranceiverSynch(uint8_t *Copy_u8TData,uint8_t *Copy_u8RData, uint8_t Copy_u8BufferSize)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	27 97       	sbiw	r28, 0x07	; 7
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	9c 83       	std	Y+4, r25	; 0x04
    1aea:	8b 83       	std	Y+3, r24	; 0x03
    1aec:	7e 83       	std	Y+6, r23	; 0x06
    1aee:	6d 83       	std	Y+5, r22	; 0x05
    1af0:	4f 83       	std	Y+7, r20	; 0x07
	SPI_State Local_u8ErrorState = OK;
    1af2:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8Counter = 0;
    1af4:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL)) {
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	09 f1       	breq	.+66     	; 0x1b40 <SPI_BufferTranceiverSynch+0x6c>
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	e9 f0       	breq	.+58     	; 0x1b40 <SPI_BufferTranceiverSynch+0x6c>
    1b06:	17 c0       	rjmp	.+46     	; 0x1b36 <SPI_BufferTranceiverSynch+0x62>
		while (Local_u8Counter < Copy_u8BufferSize) {
			SPI_uint8_tTranceive(Copy_u8TData[Local_u8Counter],
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	fc 01       	movw	r30, r24
    1b14:	e2 0f       	add	r30, r18
    1b16:	f3 1f       	adc	r31, r19
    1b18:	40 81       	ld	r20, Z
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	28 0f       	add	r18, r24
    1b26:	39 1f       	adc	r19, r25
    1b28:	84 2f       	mov	r24, r20
    1b2a:	b9 01       	movw	r22, r18
    1b2c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <SPI_uint8_tTranceive>
					&Copy_u8RData[Local_u8Counter]);
			Local_u8Counter++;
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	8f 5f       	subi	r24, 0xFF	; 255
    1b34:	89 83       	std	Y+1, r24	; 0x01
SPI_State SPI_BufferTranceiverSynch(uint8_t *Copy_u8TData,uint8_t *Copy_u8RData, uint8_t Copy_u8BufferSize)
{
	SPI_State Local_u8ErrorState = OK;
	uint8_t Local_u8Counter = 0;
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL)) {
		while (Local_u8Counter < Copy_u8BufferSize) {
    1b36:	99 81       	ldd	r25, Y+1	; 0x01
    1b38:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3a:	98 17       	cp	r25, r24
    1b3c:	28 f3       	brcs	.-54     	; 0x1b08 <SPI_BufferTranceiverSynch+0x34>
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <SPI_BufferTranceiverSynch+0x70>
					&Copy_u8RData[Local_u8Counter]);
			Local_u8Counter++;
		}

	} else {
		Local_u8ErrorState = NOT_OK;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b46:	27 96       	adiw	r28, 0x07	; 7
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <SPI_u8BufferTranceiverAsynch>:

//********************************************************************************************************************************

SPI_State SPI_u8BufferTranceiverAsynch(SPI_BUFFER *spi_buffer)

{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <SPI_u8BufferTranceiverAsynch+0x6>
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <SPI_u8BufferTranceiverAsynch+0x8>
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	9c 83       	std	Y+4, r25	; 0x04
    1b66:	8b 83       	std	Y+3, r24	; 0x03

	SPI_State Local_u8ErrorState = OK;
    1b68:	1a 82       	std	Y+2, r1	; 0x02
	SPI_FunState SPI_u8State;
	if ( SPI_u8State == IDLE)
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	88 23       	and	r24, r24
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <SPI_u8BufferTranceiverAsynch+0x1a>
    1b70:	53 c0       	rjmp	.+166    	; 0x1c18 <SPI_u8BufferTranceiverAsynch+0xc0>
	{
		if ((spi_buffer != NULL) && (spi_buffer->Copy_u8TData != NULL)
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <SPI_u8BufferTranceiverAsynch+0x24>
    1b7a:	4c c0       	rjmp	.+152    	; 0x1c14 <SPI_u8BufferTranceiverAsynch+0xbc>
    1b7c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b7e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b80:	80 81       	ld	r24, Z
    1b82:	91 81       	ldd	r25, Z+1	; 0x01
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <SPI_u8BufferTranceiverAsynch+0x32>
    1b88:	45 c0       	rjmp	.+138    	; 0x1c14 <SPI_u8BufferTranceiverAsynch+0xbc>
    1b8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <SPI_u8BufferTranceiverAsynch+0x40>
    1b96:	3e c0       	rjmp	.+124    	; 0x1c14 <SPI_u8BufferTranceiverAsynch+0xbc>
    1b98:	eb 81       	ldd	r30, Y+3	; 0x03
    1b9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9c:	85 81       	ldd	r24, Z+5	; 0x05
    1b9e:	96 81       	ldd	r25, Z+6	; 0x06
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	c1 f1       	breq	.+112    	; 0x1c14 <SPI_u8BufferTranceiverAsynch+0xbc>
				&& (spi_buffer->Copy_u8RData != NULL)
				&& (spi_buffer->NotificationFuncn != NULL))
		{
			/*SPI is now Busy*/
			SPI_u8State = BUSY;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	89 83       	std	Y+1, r24	; 0x01

			/*Assign the SPI data globally*/
			SPI_pu8TData = spi_buffer->Copy_u8TData;
    1ba8:	eb 81       	ldd	r30, Y+3	; 0x03
    1baa:	fc 81       	ldd	r31, Y+4	; 0x04
    1bac:	80 81       	ld	r24, Z
    1bae:	91 81       	ldd	r25, Z+1	; 0x01
    1bb0:	90 93 70 00 	sts	0x0070, r25
    1bb4:	80 93 6f 00 	sts	0x006F, r24
			SPI_pu8RData = spi_buffer->Copy_u8RData;
    1bb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bba:	fc 81       	ldd	r31, Y+4	; 0x04
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	90 93 72 00 	sts	0x0072, r25
    1bc4:	80 93 71 00 	sts	0x0071, r24
			SPI_u8BufferSize = spi_buffer->Copy_u8BufferSize;
    1bc8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bca:	fc 81       	ldd	r31, Y+4	; 0x04
    1bcc:	84 81       	ldd	r24, Z+4	; 0x04
    1bce:	80 93 75 00 	sts	0x0075, r24
			SPI_pvNotificationFunc = spi_buffer->NotificationFuncn;
    1bd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1bd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1bd6:	85 81       	ldd	r24, Z+5	; 0x05
    1bd8:	96 81       	ldd	r25, Z+6	; 0x06
    1bda:	90 93 74 00 	sts	0x0074, r25
    1bde:	80 93 73 00 	sts	0x0073, r24

			/*Set Index to first element*/
			SPI_u8Index = 0;
    1be2:	10 92 76 00 	sts	0x0076, r1

			/*Transmit first Data */
			SPDR = SPI_pu8TData[SPI_u8Index];
    1be6:	af e2       	ldi	r26, 0x2F	; 47
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	20 91 6f 00 	lds	r18, 0x006F
    1bee:	30 91 70 00 	lds	r19, 0x0070
    1bf2:	80 91 76 00 	lds	r24, 0x0076
    1bf6:	88 2f       	mov	r24, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	f9 01       	movw	r30, r18
    1bfc:	e8 0f       	add	r30, r24
    1bfe:	f9 1f       	adc	r31, r25
    1c00:	80 81       	ld	r24, Z
    1c02:	8c 93       	st	X, r24

			/*SPI Interrupt Enable*/
			SET_BIT(SPCR , SPIE);
    1c04:	ad e2       	ldi	r26, 0x2D	; 45
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	ed e2       	ldi	r30, 0x2D	; 45
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 68       	ori	r24, 0x80	; 128
    1c10:	8c 93       	st	X, r24
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <SPI_u8BufferTranceiverAsynch+0xc0>
		}
		else
		{
			Local_u8ErrorState = NOT_OK;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	8a 83       	std	Y+2, r24	; 0x02
		}


	}
	return Local_u8ErrorState;}
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <__vector_12>:

//********************************************************************************************************************************
	void __vector_12(void) __attribute__ ((signal));
	void __vector_12(void)
	{
    1c28:	1f 92       	push	r1
    1c2a:	0f 92       	push	r0
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	0f 92       	push	r0
    1c30:	11 24       	eor	r1, r1
    1c32:	2f 93       	push	r18
    1c34:	3f 93       	push	r19
    1c36:	4f 93       	push	r20
    1c38:	5f 93       	push	r21
    1c3a:	6f 93       	push	r22
    1c3c:	7f 93       	push	r23
    1c3e:	8f 93       	push	r24
    1c40:	9f 93       	push	r25
    1c42:	af 93       	push	r26
    1c44:	bf 93       	push	r27
    1c46:	ef 93       	push	r30
    1c48:	ff 93       	push	r31
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
		/*Receive Data*/
		SPI_pu8RData[SPI_u8Index] = SPDR;
    1c52:	20 91 71 00 	lds	r18, 0x0071
    1c56:	30 91 72 00 	lds	r19, 0x0072
    1c5a:	80 91 76 00 	lds	r24, 0x0076
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	d9 01       	movw	r26, r18
    1c64:	a8 0f       	add	r26, r24
    1c66:	b9 1f       	adc	r27, r25
    1c68:	ef e2       	ldi	r30, 0x2F	; 47
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8c 93       	st	X, r24

		/*Increment Data index of the buffer*/
		SPI_u8Index++;
    1c70:	80 91 76 00 	lds	r24, 0x0076
    1c74:	8f 5f       	subi	r24, 0xFF	; 255
    1c76:	80 93 76 00 	sts	0x0076, r24

		if (SPI_u8Index == SPI_u8BufferSize)
    1c7a:	90 91 76 00 	lds	r25, 0x0076
    1c7e:	80 91 75 00 	lds	r24, 0x0075
    1c82:	98 17       	cp	r25, r24
    1c84:	79 f4       	brne	.+30     	; 0x1ca4 <__vector_12+0x7c>
		{
			/*Buffer Complete*/

			/*SPI is now IDLE*/
			SPIState = IDLE;
    1c86:	10 92 6e 00 	sts	0x006E, r1

			/*SPI Interrupt Disable*/
			CLEAR_BIT(SPCR, SPIE);
    1c8a:	ad e2       	ldi	r26, 0x2D	; 45
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	ed e2       	ldi	r30, 0x2D	; 45
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	8f 77       	andi	r24, 0x7F	; 127
    1c96:	8c 93       	st	X, r24

			/*Call Notification Function*/
			SPI_pvNotificationFunc();
    1c98:	e0 91 73 00 	lds	r30, 0x0073
    1c9c:	f0 91 74 00 	lds	r31, 0x0074
    1ca0:	09 95       	icall
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <__vector_12+0x9a>
		}
		else {
			/*Buffer not Complete*/

			/*Transmit next Data*/
			SPDR = SPI_pu8TData[SPI_u8Index];
    1ca4:	af e2       	ldi	r26, 0x2F	; 47
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	20 91 6f 00 	lds	r18, 0x006F
    1cac:	30 91 70 00 	lds	r19, 0x0070
    1cb0:	80 91 76 00 	lds	r24, 0x0076
    1cb4:	88 2f       	mov	r24, r24
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	f9 01       	movw	r30, r18
    1cba:	e8 0f       	add	r30, r24
    1cbc:	f9 1f       	adc	r31, r25
    1cbe:	80 81       	ld	r24, Z
    1cc0:	8c 93       	st	X, r24
		}
	}
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	ff 91       	pop	r31
    1cc8:	ef 91       	pop	r30
    1cca:	bf 91       	pop	r27
    1ccc:	af 91       	pop	r26
    1cce:	9f 91       	pop	r25
    1cd0:	8f 91       	pop	r24
    1cd2:	7f 91       	pop	r23
    1cd4:	6f 91       	pop	r22
    1cd6:	5f 91       	pop	r21
    1cd8:	4f 91       	pop	r20
    1cda:	3f 91       	pop	r19
    1cdc:	2f 91       	pop	r18
    1cde:	0f 90       	pop	r0
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	0f 90       	pop	r0
    1ce4:	1f 90       	pop	r1
    1ce6:	18 95       	reti

00001ce8 <Timer0_Init>:
 * @retval          - none
 * @Note            - Supported for TIMER0 ONLY
 * ===================================
 * */
void Timer0_Init(TIMER0_Config_t* timer0_cfg)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	27 97       	sbiw	r28, 0x07	; 7
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    G_Timer0_ConFig = *timer0_cfg;
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	22 e8       	ldi	r18, 0x82	; 130
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	3c 83       	std	Y+4, r19	; 0x04
    1d0a:	2b 83       	std	Y+3, r18	; 0x03
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
    1d10:	35 e0       	ldi	r19, 0x05	; 5
    1d12:	3f 83       	std	Y+7, r19	; 0x07
    1d14:	ed 81       	ldd	r30, Y+5	; 0x05
    1d16:	fe 81       	ldd	r31, Y+6	; 0x06
    1d18:	00 80       	ld	r0, Z
    1d1a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d1c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d1e:	2f 5f       	subi	r18, 0xFF	; 255
    1d20:	3f 4f       	sbci	r19, 0xFF	; 255
    1d22:	3e 83       	std	Y+6, r19	; 0x06
    1d24:	2d 83       	std	Y+5, r18	; 0x05
    1d26:	eb 81       	ldd	r30, Y+3	; 0x03
    1d28:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2a:	00 82       	st	Z, r0
    1d2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d30:	2f 5f       	subi	r18, 0xFF	; 255
    1d32:	3f 4f       	sbci	r19, 0xFF	; 255
    1d34:	3c 83       	std	Y+4, r19	; 0x04
    1d36:	2b 83       	std	Y+3, r18	; 0x03
    1d38:	3f 81       	ldd	r19, Y+7	; 0x07
    1d3a:	31 50       	subi	r19, 0x01	; 1
    1d3c:	3f 83       	std	Y+7, r19	; 0x07
    1d3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d40:	88 23       	and	r24, r24
    1d42:	41 f7       	brne	.-48     	; 0x1d14 <Timer0_Init+0x2c>

    // 1. select Timer_Mode 
    TCCR0 |= timer0_cfg->Timer_Mode;
    1d44:	a3 e5       	ldi	r26, 0x53	; 83
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e3 e5       	ldi	r30, 0x53	; 83
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	90 81       	ld	r25, Z
    1d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d50:	fa 81       	ldd	r31, Y+2	; 0x02
    1d52:	80 81       	ld	r24, Z
    1d54:	89 2b       	or	r24, r25
    1d56:	8c 93       	st	X, r24

    if(timer0_cfg->Timer_Mode == Timer0_Mode_PWM_INVERTING ||
    1d58:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 37       	cpi	r24, 0x78	; 120
    1d60:	29 f0       	breq	.+10     	; 0x1d6c <Timer0_Init+0x84>
    1d62:	e9 81       	ldd	r30, Y+1	; 0x01
    1d64:	fa 81       	ldd	r31, Y+2	; 0x02
    1d66:	80 81       	ld	r24, Z
    1d68:	88 36       	cpi	r24, 0x68	; 104
    1d6a:	29 f4       	brne	.+10     	; 0x1d76 <Timer0_Init+0x8e>
        timer0_cfg->Timer_Mode == Timer0_Mode_PWM_NONINVERTING
        )
    {
        // configure OC0 (PB3) as output
        GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	63 e0       	ldi	r22, 0x03	; 3
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <GPIO_setupPinDirection>
    }

    // 2. select Timer_Clock_Source
    TCCR0 |= timer0_cfg->Timer_Clock_Source;
    1d76:	a3 e5       	ldi	r26, 0x53	; 83
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e3 e5       	ldi	r30, 0x53	; 83
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	90 81       	ld	r25, Z
    1d80:	e9 81       	ldd	r30, Y+1	; 0x01
    1d82:	fa 81       	ldd	r31, Y+2	; 0x02
    1d84:	81 81       	ldd	r24, Z+1	; 0x01
    1d86:	89 2b       	or	r24, r25
    1d88:	8c 93       	st	X, r24
        if(timer0_cfg->Timer_Clock_Source == Timer_Clock_Source_External_Falling_Edge ||
    1d8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8e:	81 81       	ldd	r24, Z+1	; 0x01
    1d90:	86 30       	cpi	r24, 0x06	; 6
    1d92:	29 f0       	breq	.+10     	; 0x1d9e <Timer0_Init+0xb6>
    1d94:	e9 81       	ldd	r30, Y+1	; 0x01
    1d96:	fa 81       	ldd	r31, Y+2	; 0x02
    1d98:	81 81       	ldd	r24, Z+1	; 0x01
    1d9a:	87 30       	cpi	r24, 0x07	; 7
    1d9c:	29 f4       	brne	.+10     	; 0x1da8 <Timer0_Init+0xc0>
        timer0_cfg->Timer_Clock_Source == Timer_Clock_Source_External_Rising_Edge
        )
    {
        // configure T0 (PB0) as INPUT
        GPIO_setupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT);
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	41 e0       	ldi	r20, 0x01	; 1
    1da4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <GPIO_setupPinDirection>
    }

    // 3. select IRQ_Enable
    TIMSK |= timer0_cfg->IRQ_Enable;
    1da8:	a9 e5       	ldi	r26, 0x59	; 89
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e9 e5       	ldi	r30, 0x59	; 89
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	90 81       	ld	r25, Z
    1db2:	e9 81       	ldd	r30, Y+1	; 0x01
    1db4:	fa 81       	ldd	r31, Y+2	; 0x02
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	89 2b       	or	r24, r25
    1dba:	8c 93       	st	X, r24
    if(timer0_cfg->IRQ_Enable != IRQ_Enable_NON)
    1dbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	88 23       	and	r24, r24
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <Timer0_Init+0xe0>
    {
        sei();
    1dc6:	78 94       	sei
    }

    // 4. Call back ISR function
    GP_IRQ_CallBack = timer0_cfg->P_IRQ_CallBack;
    1dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dca:	fa 81       	ldd	r31, Y+2	; 0x02
    1dcc:	83 81       	ldd	r24, Z+3	; 0x03
    1dce:	94 81       	ldd	r25, Z+4	; 0x04
    1dd0:	90 93 78 00 	sts	0x0078, r25
    1dd4:	80 93 77 00 	sts	0x0077, r24
}
    1dd8:	27 96       	adiw	r28, 0x07	; 7
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <Timer0_DeInit>:
 * @retval          - none
 * @Note            - none
 * ===================================
 * */
void Timer0_DeInit(void)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    TCCR0 &= ~((1<<CS00) | (1<<CS01) | (1<<CS02));
    1df2:	a3 e5       	ldi	r26, 0x53	; 83
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e3 e5       	ldi	r30, 0x53	; 83
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 7f       	andi	r24, 0xF8	; 248
    1dfe:	8c 93       	st	X, r24
}
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <Timer0_GetCounterValue>:
 * @retval          - none
 * @Note            - none
 * ===================================
 * */
void Timer0_GetCounterValue(uint8_t* TicksNumber)
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <Timer0_GetCounterValue+0x6>
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	9a 83       	std	Y+2, r25	; 0x02
    1e12:	89 83       	std	Y+1, r24	; 0x01
    *TicksNumber = TCNT0;
    1e14:	e2 e5       	ldi	r30, 0x52	; 82
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1e:	80 83       	st	Z, r24
}
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <Timer0_SetCompareValue>:
 * @retval          - none
 * @Note            - none
 * ===================================
 * */
void Timer0_SetCompareValue(uint8_t TicksNumber)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	0f 92       	push	r0
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = TicksNumber;
    1e36:	ec e5       	ldi	r30, 0x5C	; 92
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	80 83       	st	Z, r24
}
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <Timer0_PWM_DutyCycle>:

void Timer0_PWM_DutyCycle(uint8_t DutyCycle)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	0f 92       	push	r0
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	89 83       	std	Y+1, r24	; 0x01
    if(G_Timer0_ConFig.Timer_Mode == Timer0_Mode_PWM_NONINVERTING)
    1e52:	80 91 82 00 	lds	r24, 0x0082
    1e56:	88 36       	cpi	r24, 0x68	; 104
    1e58:	d9 f4       	brne	.+54     	; 0x1e90 <Timer0_PWM_DutyCycle+0x4a>
    {
        OCR0 = (0xFF*DutyCycle)/100;
    1e5a:	ec e5       	ldi	r30, 0x5C	; 92
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	48 2f       	mov	r20, r24
    1e62:	50 e0       	ldi	r21, 0x00	; 0
    1e64:	ca 01       	movw	r24, r20
    1e66:	9c 01       	movw	r18, r24
    1e68:	22 0f       	add	r18, r18
    1e6a:	33 1f       	adc	r19, r19
    1e6c:	c9 01       	movw	r24, r18
    1e6e:	96 95       	lsr	r25
    1e70:	98 2f       	mov	r25, r24
    1e72:	88 27       	eor	r24, r24
    1e74:	97 95       	ror	r25
    1e76:	87 95       	ror	r24
    1e78:	82 1b       	sub	r24, r18
    1e7a:	93 0b       	sbc	r25, r19
    1e7c:	84 0f       	add	r24, r20
    1e7e:	95 1f       	adc	r25, r21
    1e80:	24 e6       	ldi	r18, 0x64	; 100
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	b9 01       	movw	r22, r18
    1e86:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__divmodhi4>
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	80 83       	st	Z, r24
    1e8e:	1f c0       	rjmp	.+62     	; 0x1ece <Timer0_PWM_DutyCycle+0x88>
    }else if(G_Timer0_ConFig.Timer_Mode == Timer0_Mode_PWM_INVERTING)
    1e90:	80 91 82 00 	lds	r24, 0x0082
    1e94:	88 37       	cpi	r24, 0x78	; 120
    1e96:	d9 f4       	brne	.+54     	; 0x1ece <Timer0_PWM_DutyCycle+0x88>
    {
        OCR0 = (255- (0xFF*DutyCycle)/100);
    1e98:	ec e5       	ldi	r30, 0x5C	; 92
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	48 2f       	mov	r20, r24
    1ea0:	50 e0       	ldi	r21, 0x00	; 0
    1ea2:	ca 01       	movw	r24, r20
    1ea4:	9c 01       	movw	r18, r24
    1ea6:	22 0f       	add	r18, r18
    1ea8:	33 1f       	adc	r19, r19
    1eaa:	c9 01       	movw	r24, r18
    1eac:	96 95       	lsr	r25
    1eae:	98 2f       	mov	r25, r24
    1eb0:	88 27       	eor	r24, r24
    1eb2:	97 95       	ror	r25
    1eb4:	87 95       	ror	r24
    1eb6:	82 1b       	sub	r24, r18
    1eb8:	93 0b       	sbc	r25, r19
    1eba:	84 0f       	add	r24, r20
    1ebc:	95 1f       	adc	r25, r21
    1ebe:	24 e6       	ldi	r18, 0x64	; 100
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	b9 01       	movw	r22, r18
    1ec4:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__divmodhi4>
    1ec8:	cb 01       	movw	r24, r22
    1eca:	80 95       	com	r24
    1ecc:	80 83       	st	Z, r24
    }
}
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <__vector_11>:
/* ============================================================================ */
/* ================================== IRQ Handlers ============================ */
/* ============================================================================ */

ISR(TIMER0_OVF_vect)
{
    1ed6:	1f 92       	push	r1
    1ed8:	0f 92       	push	r0
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	0f 92       	push	r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	2f 93       	push	r18
    1ee2:	3f 93       	push	r19
    1ee4:	4f 93       	push	r20
    1ee6:	5f 93       	push	r21
    1ee8:	6f 93       	push	r22
    1eea:	7f 93       	push	r23
    1eec:	8f 93       	push	r24
    1eee:	9f 93       	push	r25
    1ef0:	af 93       	push	r26
    1ef2:	bf 93       	push	r27
    1ef4:	ef 93       	push	r30
    1ef6:	ff 93       	push	r31
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    GP_IRQ_CallBack();
    1f00:	e0 91 77 00 	lds	r30, 0x0077
    1f04:	f0 91 78 00 	lds	r31, 0x0078
    1f08:	09 95       	icall
}
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	ff 91       	pop	r31
    1f10:	ef 91       	pop	r30
    1f12:	bf 91       	pop	r27
    1f14:	af 91       	pop	r26
    1f16:	9f 91       	pop	r25
    1f18:	8f 91       	pop	r24
    1f1a:	7f 91       	pop	r23
    1f1c:	6f 91       	pop	r22
    1f1e:	5f 91       	pop	r21
    1f20:	4f 91       	pop	r20
    1f22:	3f 91       	pop	r19
    1f24:	2f 91       	pop	r18
    1f26:	0f 90       	pop	r0
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	0f 90       	pop	r0
    1f2c:	1f 90       	pop	r1
    1f2e:	18 95       	reti

00001f30 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1f30:	1f 92       	push	r1
    1f32:	0f 92       	push	r0
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	0f 92       	push	r0
    1f38:	11 24       	eor	r1, r1
    1f3a:	2f 93       	push	r18
    1f3c:	3f 93       	push	r19
    1f3e:	4f 93       	push	r20
    1f40:	5f 93       	push	r21
    1f42:	6f 93       	push	r22
    1f44:	7f 93       	push	r23
    1f46:	8f 93       	push	r24
    1f48:	9f 93       	push	r25
    1f4a:	af 93       	push	r26
    1f4c:	bf 93       	push	r27
    1f4e:	ef 93       	push	r30
    1f50:	ff 93       	push	r31
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    GP_IRQ_CallBack();
    1f5a:	e0 91 77 00 	lds	r30, 0x0077
    1f5e:	f0 91 78 00 	lds	r31, 0x0078
    1f62:	09 95       	icall
}
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	ff 91       	pop	r31
    1f6a:	ef 91       	pop	r30
    1f6c:	bf 91       	pop	r27
    1f6e:	af 91       	pop	r26
    1f70:	9f 91       	pop	r25
    1f72:	8f 91       	pop	r24
    1f74:	7f 91       	pop	r23
    1f76:	6f 91       	pop	r22
    1f78:	5f 91       	pop	r21
    1f7a:	4f 91       	pop	r20
    1f7c:	3f 91       	pop	r19
    1f7e:	2f 91       	pop	r18
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <TWI_MasterInit>:
 * This function sets up the TWI hardware in master mode with the specified prescaler.
 *
 * @param[in] Prescaler The prescaler value to configure the TWI clock.
 */
void TWI_MasterInit(uint8_t Prescaler)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	0f 92       	push	r0
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	89 83       	std	Y+1, r24	; 0x01
	/*Set Bit Rate*/
//	TWBR= (uint8_t) (((F_CPU/SCL_Clock)-16) / (2*Prescaler));
	TWBR= 0x48;
    1f96:	e0 e2       	ldi	r30, 0x20	; 32
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	88 e4       	ldi	r24, 0x48	; 72
    1f9c:	80 83       	st	Z, r24

	/*Set Prescaller*/
	if (Prescaler==PRESCALER_1)
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	41 f4       	brne	.+16     	; 0x1fb4 <TWI_MasterInit+0x2a>
	{
		TWSR = (TWSR & 0xFC) | 0;
    1fa4:	a1 e2       	ldi	r26, 0x21	; 33
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e1 e2       	ldi	r30, 0x21	; 33
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	8c 7f       	andi	r24, 0xFC	; 252
    1fb0:	8c 93       	st	X, r24
    1fb2:	22 c0       	rjmp	.+68     	; 0x1ff8 <TWI_MasterInit+0x6e>
	}
	else if(Prescaler==PRESCALER_4)
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	84 30       	cpi	r24, 0x04	; 4
    1fb8:	49 f4       	brne	.+18     	; 0x1fcc <TWI_MasterInit+0x42>
	{
		TWSR= (TWSR & 0xFC) | 1;
    1fba:	a1 e2       	ldi	r26, 0x21	; 33
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e1 e2       	ldi	r30, 0x21	; 33
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	8c 7f       	andi	r24, 0xFC	; 252
    1fc6:	81 60       	ori	r24, 0x01	; 1
    1fc8:	8c 93       	st	X, r24
    1fca:	16 c0       	rjmp	.+44     	; 0x1ff8 <TWI_MasterInit+0x6e>
	}
	else if (Prescaler==PRESCALER_16)
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	80 31       	cpi	r24, 0x10	; 16
    1fd0:	49 f4       	brne	.+18     	; 0x1fe4 <TWI_MasterInit+0x5a>
	{
		TWSR= (TWSR & 0xFC) | 2;
    1fd2:	a1 e2       	ldi	r26, 0x21	; 33
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e1 e2       	ldi	r30, 0x21	; 33
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	8c 7f       	andi	r24, 0xFC	; 252
    1fde:	82 60       	ori	r24, 0x02	; 2
    1fe0:	8c 93       	st	X, r24
    1fe2:	0a c0       	rjmp	.+20     	; 0x1ff8 <TWI_MasterInit+0x6e>
	}
	else if (Prescaler==PRESCALER_64)
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	80 34       	cpi	r24, 0x40	; 64
    1fe8:	39 f4       	brne	.+14     	; 0x1ff8 <TWI_MasterInit+0x6e>
	{
		TWSR= (TWSR & 0xFC) | 3;
    1fea:	a1 e2       	ldi	r26, 0x21	; 33
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e1 e2       	ldi	r30, 0x21	; 33
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	83 60       	ori	r24, 0x03	; 3
    1ff6:	8c 93       	st	X, r24
	}

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWEA);
    1ff8:	a6 e5       	ldi	r26, 0x56	; 86
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e6 e5       	ldi	r30, 0x56	; 86
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	80 64       	ori	r24, 0x40	; 64
    2004:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWEN);
    2006:	a6 e5       	ldi	r26, 0x56	; 86
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e6 e5       	ldi	r30, 0x56	; 86
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	84 60       	ori	r24, 0x04	; 4
    2012:	8c 93       	st	X, r24
}
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <TWI_SlaveInit>:
 * This function sets up the TWI hardware in slave mode with the specified address.
 *
 * @param[in] Address The address to be assigned to the TWI slave device.
 */
void TWI_SlaveInit(uint8_t Address)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	0f 92       	push	r0
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	89 83       	std	Y+1, r24	; 0x01
	/*Set Slave Address*/
	if (Address!=NULL)
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	88 2f       	mov	r24, r24
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	29 f0       	breq	.+10     	; 0x203c <TWI_SlaveInit+0x20>
	{
		TWAR = Address<<1;
    2032:	e2 e2       	ldi	r30, 0x22	; 34
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	88 0f       	add	r24, r24
    203a:	80 83       	st	Z, r24
	}

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWEA);
    203c:	a6 e5       	ldi	r26, 0x56	; 86
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e6 e5       	ldi	r30, 0x56	; 86
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	80 64       	ori	r24, 0x40	; 64
    2048:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWEN);
    204a:	a6 e5       	ldi	r26, 0x56	; 86
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e6 e5       	ldi	r30, 0x56	; 86
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	84 60       	ori	r24, 0x04	; 4
    2056:	8c 93       	st	X, r24
}
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <TWI_Start>:
 * @brief Sends a start condition on the TWI bus.
 *
 * This function initiates a start condition to signal the beginning of a TWI communication.
 */
void TWI_Start(void)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
	/*Send START*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    2068:	e6 e5       	ldi	r30, 0x56	; 86
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	84 ea       	ldi	r24, 0xA4	; 164
    206e:	80 83       	st	Z, r24

	/*Wait for TWINT Flag set*/
	while (!(TWCR & (1<<TWINT)));
    2070:	e6 e5       	ldi	r30, 0x56	; 86
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	88 23       	and	r24, r24
    2078:	dc f7       	brge	.-10     	; 0x2070 <TWI_Start+0x10>

	/* Check value of TWI Status Register*/
	while((TWSR & 0xF8) != START);
    207a:	e1 e2       	ldi	r30, 0x21	; 33
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	88 7f       	andi	r24, 0xF8	; 248
    2086:	90 70       	andi	r25, 0x00	; 0
    2088:	88 30       	cpi	r24, 0x08	; 8
    208a:	91 05       	cpc	r25, r1
    208c:	b1 f7       	brne	.-20     	; 0x207a <TWI_Start+0x1a>
}
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <TWI_RepeatStart>:
 *
 * This function initiates a repeated start condition to signal the beginning of a new TWI communication sequence
 * without releasing the bus.
 */
void TWI_RepeatStart(void)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
	/*Send Repeated START*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    209c:	e6 e5       	ldi	r30, 0x56	; 86
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	84 ea       	ldi	r24, 0xA4	; 164
    20a2:	80 83       	st	Z, r24

	/*Wait for TWINT Flag set*/
	while (!(TWCR & (1<<TWINT)));
    20a4:	e6 e5       	ldi	r30, 0x56	; 86
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	88 23       	and	r24, r24
    20ac:	dc f7       	brge	.-10     	; 0x20a4 <TWI_RepeatStart+0x10>

	/* Check value of TWI Status Register*/
	while((TWSR & 0xF8) != REPEATED_START);
    20ae:	e1 e2       	ldi	r30, 0x21	; 33
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	88 7f       	andi	r24, 0xF8	; 248
    20ba:	90 70       	andi	r25, 0x00	; 0
    20bc:	80 31       	cpi	r24, 0x10	; 16
    20be:	91 05       	cpc	r25, r1
    20c0:	b1 f7       	brne	.-20     	; 0x20ae <TWI_RepeatStart+0x1a>
}
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <TWI_SendSlaveAddWithW>:
 * This function sends the specified slave address along with a write request on the TWI bus.
 *
 * @param[in] Address The address of the slave device.
 */
void TWI_SendSlaveAddWithW(uint8_t Address)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	0f 92       	push	r0
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	89 83       	std	Y+1, r24	; 0x01
	/*Send Slave Address*/
	TWDR = (Address<<1);
    20d4:	e3 e2       	ldi	r30, 0x23	; 35
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	88 0f       	add	r24, r24
    20dc:	80 83       	st	Z, r24

	/*Write request*/
	CLEAR_BIT(TWDR,0);
    20de:	a3 e2       	ldi	r26, 0x23	; 35
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e3 e2       	ldi	r30, 0x23	; 35
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	8e 7f       	andi	r24, 0xFE	; 254
    20ea:	8c 93       	st	X, r24

	/*Clear Start Condition*/
	CLEAR_BIT(TWCR,TWSTA);
    20ec:	a6 e5       	ldi	r26, 0x56	; 86
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e6 e5       	ldi	r30, 0x56	; 86
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	8f 7d       	andi	r24, 0xDF	; 223
    20f8:	8c 93       	st	X, r24

	/* start transmission of address*/
	SET_BIT(TWCR,TWINT);
    20fa:	a6 e5       	ldi	r26, 0x56	; 86
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e6 e5       	ldi	r30, 0x56	; 86
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 68       	ori	r24, 0x80	; 128
    2106:	8c 93       	st	X, r24

	/*Wait for TWINT Flag set*/
	while (!(TWCR & (1<<TWINT)));
    2108:	e6 e5       	ldi	r30, 0x56	; 86
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	88 23       	and	r24, r24
    2110:	dc f7       	brge	.-10     	; 0x2108 <TWI_SendSlaveAddWithW+0x40>

	/* Check value of TWI Status Register*/
	while((TWSR & 0xF8) != MT_SLA_W_ACK);
    2112:	e1 e2       	ldi	r30, 0x21	; 33
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	88 2f       	mov	r24, r24
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	88 7f       	andi	r24, 0xF8	; 248
    211e:	90 70       	andi	r25, 0x00	; 0
    2120:	88 31       	cpi	r24, 0x18	; 24
    2122:	91 05       	cpc	r25, r1
    2124:	b1 f7       	brne	.-20     	; 0x2112 <TWI_SendSlaveAddWithW+0x4a>
}
    2126:	0f 90       	pop	r0
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <TWI_MasterWriteData>:
 * This function sends a single byte of data over the TWI bus to the addressed slave device.
 *
 * @param[in] Data The byte of data to send.
 */
void TWI_MasterWriteData(uint8_t Data)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	0f 92       	push	r0
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	89 83       	std	Y+1, r24	; 0x01
	/*Load DATA into TWDR Register*/
	TWDR = Data;
    213a:	e3 e2       	ldi	r30, 0x23	; 35
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	80 83       	st	Z, r24

	/* start transmission of data*/
	SET_BIT(TWCR,TWINT);
    2142:	a6 e5       	ldi	r26, 0x56	; 86
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e6 e5       	ldi	r30, 0x56	; 86
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	80 68       	ori	r24, 0x80	; 128
    214e:	8c 93       	st	X, r24

	/*Wait for TWINT Flag set*/
	while (!(TWCR & (1<<TWINT)));
    2150:	e6 e5       	ldi	r30, 0x56	; 86
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	88 23       	and	r24, r24
    2158:	dc f7       	brge	.-10     	; 0x2150 <TWI_MasterWriteData+0x22>

	/* Check value of TWI Status Register*/
	while((TWSR & 0xF8) != MT_DATA_T_ACK);
    215a:	e1 e2       	ldi	r30, 0x21	; 33
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	88 7f       	andi	r24, 0xF8	; 248
    2166:	90 70       	andi	r25, 0x00	; 0
    2168:	88 32       	cpi	r24, 0x28	; 40
    216a:	91 05       	cpc	r25, r1
    216c:	b1 f7       	brne	.-20     	; 0x215a <TWI_MasterWriteData+0x2c>
}
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <TWI_SendSlaveAddWithR>:
 * This function sends the specified slave address along with a read request on the TWI bus.
 *
 * @param[in] Address The address of the slave device.
 */
void TWI_SendSlaveAddWithR(uint8_t Address)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	0f 92       	push	r0
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	89 83       	std	Y+1, r24	; 0x01
	/*Send Slave Address*/
	TWDR = (Address<<1);
    2182:	e3 e2       	ldi	r30, 0x23	; 35
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	88 0f       	add	r24, r24
    218a:	80 83       	st	Z, r24

	/*read request*/
	SET_BIT(TWDR,0);
    218c:	a3 e2       	ldi	r26, 0x23	; 35
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e3 e2       	ldi	r30, 0x23	; 35
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	81 60       	ori	r24, 0x01	; 1
    2198:	8c 93       	st	X, r24

	/*Clear Start Condition*/
	CLEAR_BIT(TWCR,TWSTA);
    219a:	a6 e5       	ldi	r26, 0x56	; 86
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e6 e5       	ldi	r30, 0x56	; 86
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	8f 7d       	andi	r24, 0xDF	; 223
    21a6:	8c 93       	st	X, r24

	/* start transmission of data*/
	SET_BIT(TWCR,TWINT);
    21a8:	a6 e5       	ldi	r26, 0x56	; 86
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e6 e5       	ldi	r30, 0x56	; 86
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	80 68       	ori	r24, 0x80	; 128
    21b4:	8c 93       	st	X, r24

    /*Wait for TWINT Flag set*/
	while (!(TWCR & (1<<TWINT)));
    21b6:	e6 e5       	ldi	r30, 0x56	; 86
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	88 23       	and	r24, r24
    21be:	dc f7       	brge	.-10     	; 0x21b6 <TWI_SendSlaveAddWithR+0x40>

	/* Check value of TWI Status Register*/
    while((TWSR & 0xF8) != MT_SLA_R_ACK);
    21c0:	e1 e2       	ldi	r30, 0x21	; 33
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	88 2f       	mov	r24, r24
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	88 7f       	andi	r24, 0xF8	; 248
    21cc:	90 70       	andi	r25, 0x00	; 0
    21ce:	80 34       	cpi	r24, 0x40	; 64
    21d0:	91 05       	cpc	r25, r1
    21d2:	b1 f7       	brne	.-20     	; 0x21c0 <TWI_SendSlaveAddWithR+0x4a>
}
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <TWI_MasterReadData>:
 * This function reads a single byte of data from the TWI bus from the addressed slave device.
 *
 * @return uint8_t The byte of data received.
 */
uint8_t TWI_MasterReadData(void)
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
	/*Slave Start transmission of Data*/
	SET_BIT(TWCR,TWINT);
    21e4:	a6 e5       	ldi	r26, 0x56	; 86
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e6 e5       	ldi	r30, 0x56	; 86
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	80 68       	ori	r24, 0x80	; 128
    21f0:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEA);
    21f2:	a6 e5       	ldi	r26, 0x56	; 86
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e6 e5       	ldi	r30, 0x56	; 86
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	80 64       	ori	r24, 0x40	; 64
    21fe:	8c 93       	st	X, r24


	/*Wait for TWINT Flag set*/
	while (!(TWCR & (1<<TWINT)));
    2200:	e6 e5       	ldi	r30, 0x56	; 86
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	88 23       	and	r24, r24
    2208:	dc f7       	brge	.-10     	; 0x2200 <TWI_MasterReadData+0x24>


	/* Check value of TWI Status Register*/
	while((TWSR & 0xF8) != MT_DATA_R_ACK);
    220a:	e1 e2       	ldi	r30, 0x21	; 33
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	88 7f       	andi	r24, 0xF8	; 248
    2216:	90 70       	andi	r25, 0x00	; 0
    2218:	80 35       	cpi	r24, 0x50	; 80
    221a:	91 05       	cpc	r25, r1
    221c:	b1 f7       	brne	.-20     	; 0x220a <TWI_MasterReadData+0x2e>

	return TWDR;
    221e:	e3 e2       	ldi	r30, 0x23	; 35
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
}
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <TWT_SlaveWriteData>:
 * This function sends a single byte of data over the TWI bus to the master device.
 *
 * @param[in] Data The byte of data to send.
 */
void TWT_SlaveWriteData(uint8_t Data)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	0f 92       	push	r0
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	89 83       	std	Y+1, r24	; 0x01
	/*Load DATA into TWDR Register*/
	TWDR = Data;
    2236:	e3 e2       	ldi	r30, 0x23	; 35
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	80 83       	st	Z, r24

	/* start transmission of data*/
	SET_BIT(TWCR,TWINT);
    223e:	a6 e5       	ldi	r26, 0x56	; 86
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e6 e5       	ldi	r30, 0x56	; 86
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	80 68       	ori	r24, 0x80	; 128
    224a:	8c 93       	st	X, r24

	/*Wait for TWINT Flag set*/
	while (!(TWCR & (1<<TWINT)));
    224c:	e6 e5       	ldi	r30, 0x56	; 86
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	88 23       	and	r24, r24
    2254:	dc f7       	brge	.-10     	; 0x224c <TWT_SlaveWriteData+0x22>

	/* Check value of TWI Status Register*/
	while((TWSR & 0xF8) != SLA_W_ACK);
    2256:	e1 e2       	ldi	r30, 0x21	; 33
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	88 2f       	mov	r24, r24
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	88 7f       	andi	r24, 0xF8	; 248
    2262:	90 70       	andi	r25, 0x00	; 0
    2264:	80 36       	cpi	r24, 0x60	; 96
    2266:	91 05       	cpc	r25, r1
    2268:	b1 f7       	brne	.-20     	; 0x2256 <TWT_SlaveWriteData+0x2c>
}
    226a:	0f 90       	pop	r0
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <TWI_SlaveReadData>:
 * This function reads a single byte of data from the TWI bus from the master device.
 *
 * @return uint8_t The byte of data received.
 */
uint8_t TWI_SlaveReadData(void)
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
	/*Slave Start Receive Data*/
	SET_BIT(TWCR,TWINT);
    227a:	a6 e5       	ldi	r26, 0x56	; 86
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e6 e5       	ldi	r30, 0x56	; 86
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	80 68       	ori	r24, 0x80	; 128
    2286:	8c 93       	st	X, r24

	/*Wait for TWINT Flag set*/
	while (!(TWCR & (1<<TWINT)));
    2288:	e6 e5       	ldi	r30, 0x56	; 86
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	88 23       	and	r24, r24
    2290:	dc f7       	brge	.-10     	; 0x2288 <TWI_SlaveReadData+0x16>

	/* Check value of TWI Status Register*/
	while((TWSR & 0xF8) != SLA_R_ACK);
    2292:	e1 e2       	ldi	r30, 0x21	; 33
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	88 7f       	andi	r24, 0xF8	; 248
    229e:	90 70       	andi	r25, 0x00	; 0
    22a0:	88 3a       	cpi	r24, 0xA8	; 168
    22a2:	91 05       	cpc	r25, r1
    22a4:	b1 f7       	brne	.-20     	; 0x2292 <TWI_SlaveReadData+0x20>

	return TWDR;
    22a6:	e3 e2       	ldi	r30, 0x23	; 35
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
}
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <TWI_Stop>:
 * @brief Sends a stop condition on the TWI bus.
 *
 * This function generates a stop condition to signal the end of a TWI communication.
 */
void TWI_Stop(void)
{
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    22ba:	e6 e5       	ldi	r30, 0x56	; 86
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	84 e9       	ldi	r24, 0x94	; 148
    22c0:	80 83       	st	Z, r24

    /* Wait for STOP condition to be executed on bus */
    while (TWCR & (1 << TWSTO));
    22c2:	e6 e5       	ldi	r30, 0x56	; 86
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	80 71       	andi	r24, 0x10	; 16
    22ce:	90 70       	andi	r25, 0x00	; 0
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	b9 f7       	brne	.-18     	; 0x22c2 <TWI_Stop+0x10>
}
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <UART_Init>:
 *
 * This function configures the UART baud rate, frame format (default 8-bit data, no parity),
 * and enables the UART transmitter and receiver.
 */
void UART_Init(uint32_t baud_rate)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <UART_Init+0x6>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <UART_Init+0x8>
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <UART_Init+0xa>
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	6b 83       	std	Y+3, r22	; 0x03
    22ea:	7c 83       	std	Y+4, r23	; 0x04
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    // Calculate the UBRR value for the given baud rate
    uint16_t ubrr_value = (uint16_t)(((F_CPU / (baud_rate * 16UL))) - 1);
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	9c 81       	ldd	r25, Y+4	; 0x04
    22f4:	ad 81       	ldd	r26, Y+5	; 0x05
    22f6:	be 81       	ldd	r27, Y+6	; 0x06
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	aa 1f       	adc	r26, r26
    22fe:	bb 1f       	adc	r27, r27
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	aa 1f       	adc	r26, r26
    2306:	bb 1f       	adc	r27, r27
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	aa 1f       	adc	r26, r26
    230e:	bb 1f       	adc	r27, r27
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	aa 1f       	adc	r26, r26
    2316:	bb 1f       	adc	r27, r27
    2318:	9c 01       	movw	r18, r24
    231a:	ad 01       	movw	r20, r26
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	94 e2       	ldi	r25, 0x24	; 36
    2320:	a4 ef       	ldi	r26, 0xF4	; 244
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__udivmodsi4>
    232c:	da 01       	movw	r26, r20
    232e:	c9 01       	movw	r24, r18
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01

    // Set the UBRR value for the baud rate
    UBRRH = (ubrr_value >> 8);
    2336:	e0 e4       	ldi	r30, 0x40	; 64
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	9a 81       	ldd	r25, Y+2	; 0x02
    233e:	89 2f       	mov	r24, r25
    2340:	99 27       	eor	r25, r25
    2342:	80 83       	st	Z, r24
    UBRRL = (uint8_t)ubrr_value;
    2344:	e9 e2       	ldi	r30, 0x29	; 41
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	80 83       	st	Z, r24

    // Set normal mode (U2X = 0)
    CLEAR_BIT(UCSRA, U2X);
    234c:	ab e2       	ldi	r26, 0x2B	; 43
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	eb e2       	ldi	r30, 0x2B	; 43
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	8d 7f       	andi	r24, 0xFD	; 253
    2358:	8c 93       	st	X, r24

    // Configure frame format (No parity, 8-bit data by default)

    // Enable UART transmitter and receiver
    SET_BIT(UCSRB, TXEN);
    235a:	aa e2       	ldi	r26, 0x2A	; 42
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	ea e2       	ldi	r30, 0x2A	; 42
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	88 60       	ori	r24, 0x08	; 8
    2366:	8c 93       	st	X, r24
    SET_BIT(UCSRB, RXEN);
    2368:	aa e2       	ldi	r26, 0x2A	; 42
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	ea e2       	ldi	r30, 0x2A	; 42
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	80 61       	ori	r24, 0x10	; 16
    2374:	8c 93       	st	X, r24
}
    2376:	26 96       	adiw	r28, 0x06	; 6
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <UART_Send>:
 * @param[in] data The byte of data to be sent.
 *
 * This function waits until the UART data register is empty and then sends the data.
 */
void UART_Send(uint8_t data)
{
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	0f 92       	push	r0
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	89 83       	std	Y+1, r24	; 0x01
    // Wait for the transmit buffer to be empty
    while (!READ_BIT(UCSRA, UDRE));
    2394:	eb e2       	ldi	r30, 0x2B	; 43
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	82 95       	swap	r24
    239c:	86 95       	lsr	r24
    239e:	87 70       	andi	r24, 0x07	; 7
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	81 70       	andi	r24, 0x01	; 1
    23a6:	90 70       	andi	r25, 0x00	; 0
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	a1 f3       	breq	.-24     	; 0x2394 <UART_Send+0xc>
    // Send the data byte
    UDR = data;
    23ac:	ec e2       	ldi	r30, 0x2C	; 44
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	80 83       	st	Z, r24
}
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <UART_Recieve>:
 * @return The received byte of data.
 *
 * This function waits until data is received and then returns the received byte.
 */
uint8_t UART_Recieve(void)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    // Wait for data to be received
    while (!READ_BIT(UCSRA, RXC));
    23c4:	eb e2       	ldi	r30, 0x2B	; 43
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	88 23       	and	r24, r24
    23cc:	dc f7       	brge	.-10     	; 0x23c4 <UART_Recieve+0x8>
    // Return the received byte from the UART data register
    return UDR;
    23ce:	ec e2       	ldi	r30, 0x2C	; 44
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
}
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <UART_SendNumberU32>:
 * @param[in] num The 32-bit unsigned integer to be sent.
 *
 * This function sends the integer as four separate bytes over UART.
 */
void UART_SendNumberU32(uint32_t num)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <UART_SendNumberU32+0x6>
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <UART_SendNumberU32+0x8>
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <UART_SendNumberU32+0xa>
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	6b 83       	std	Y+3, r22	; 0x03
    23ea:	7c 83       	std	Y+4, r23	; 0x04
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    uint8_t *p = (uint8_t *)&num;
    23f0:	ce 01       	movw	r24, r28
    23f2:	03 96       	adiw	r24, 0x03	; 3
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	89 83       	std	Y+1, r24	; 0x01
    UART_Send(p[0]);
    23f8:	e9 81       	ldd	r30, Y+1	; 0x01
    23fa:	fa 81       	ldd	r31, Y+2	; 0x02
    23fc:	80 81       	ld	r24, Z
    23fe:	0e 94 c4 11 	call	0x2388	; 0x2388 <UART_Send>
    UART_Send(p[1]);
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	fc 01       	movw	r30, r24
    2408:	31 96       	adiw	r30, 0x01	; 1
    240a:	80 81       	ld	r24, Z
    240c:	0e 94 c4 11 	call	0x2388	; 0x2388 <UART_Send>
    UART_Send(p[2]);
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	fc 01       	movw	r30, r24
    2416:	32 96       	adiw	r30, 0x02	; 2
    2418:	80 81       	ld	r24, Z
    241a:	0e 94 c4 11 	call	0x2388	; 0x2388 <UART_Send>
    UART_Send(p[3]);
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	fc 01       	movw	r30, r24
    2424:	33 96       	adiw	r30, 0x03	; 3
    2426:	80 81       	ld	r24, Z
    2428:	0e 94 c4 11 	call	0x2388	; 0x2388 <UART_Send>
}
    242c:	26 96       	adiw	r28, 0x06	; 6
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <UART_RecieveNumberU32>:
 * @return The received 32-bit unsigned integer.
 *
 * This function receives four bytes from UART and combines them into a 32-bit integer.
 */
uint32_t UART_RecieveNumberU32(void)
{
    243e:	0f 93       	push	r16
    2440:	1f 93       	push	r17
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	00 d0       	rcall	.+0      	; 0x2448 <UART_RecieveNumberU32+0xa>
    2448:	00 d0       	rcall	.+0      	; 0x244a <UART_RecieveNumberU32+0xc>
    244a:	00 d0       	rcall	.+0      	; 0x244c <UART_RecieveNumberU32+0xe>
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    uint32_t num;
    uint8_t *p = (uint8_t *)&num;
    2450:	ce 01       	movw	r24, r28
    2452:	03 96       	adiw	r24, 0x03	; 3
    2454:	9a 83       	std	Y+2, r25	; 0x02
    2456:	89 83       	std	Y+1, r24	; 0x01
    p[0] = UART_Recieve();
    2458:	0e 94 de 11 	call	0x23bc	; 0x23bc <UART_Recieve>
    245c:	e9 81       	ldd	r30, Y+1	; 0x01
    245e:	fa 81       	ldd	r31, Y+2	; 0x02
    2460:	80 83       	st	Z, r24
    p[1] = UART_Recieve();
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	8c 01       	movw	r16, r24
    2468:	0f 5f       	subi	r16, 0xFF	; 255
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
    246c:	0e 94 de 11 	call	0x23bc	; 0x23bc <UART_Recieve>
    2470:	f8 01       	movw	r30, r16
    2472:	80 83       	st	Z, r24
    p[2] = UART_Recieve();
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
    2478:	8c 01       	movw	r16, r24
    247a:	0e 5f       	subi	r16, 0xFE	; 254
    247c:	1f 4f       	sbci	r17, 0xFF	; 255
    247e:	0e 94 de 11 	call	0x23bc	; 0x23bc <UART_Recieve>
    2482:	f8 01       	movw	r30, r16
    2484:	80 83       	st	Z, r24
    p[3] = UART_Recieve();
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	8c 01       	movw	r16, r24
    248c:	0d 5f       	subi	r16, 0xFD	; 253
    248e:	1f 4f       	sbci	r17, 0xFF	; 255
    2490:	0e 94 de 11 	call	0x23bc	; 0x23bc <UART_Recieve>
    2494:	f8 01       	movw	r30, r16
    2496:	80 83       	st	Z, r24
    return num;
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	9c 81       	ldd	r25, Y+4	; 0x04
    249c:	ad 81       	ldd	r26, Y+5	; 0x05
    249e:	be 81       	ldd	r27, Y+6	; 0x06
}
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	26 96       	adiw	r28, 0x06	; 6
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret

000024ba <UART_SendString>:
 *
 * This function sends each character of the string until it encounters the end of the string,
 * followed by the default stop character.
 */
void UART_SendString(uint8_t* str)
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <UART_SendString+0x6>
    24c0:	0f 92       	push	r0
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	9b 83       	std	Y+3, r25	; 0x03
    24c8:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i;
    for (i = 0; str[i] != '\0'; i++)
    24ca:	19 82       	std	Y+1, r1	; 0x01
    24cc:	0e c0       	rjmp	.+28     	; 0x24ea <UART_SendString+0x30>
    {
        UART_Send(str[i]);
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	9b 81       	ldd	r25, Y+3	; 0x03
    24d8:	fc 01       	movw	r30, r24
    24da:	e2 0f       	add	r30, r18
    24dc:	f3 1f       	adc	r31, r19
    24de:	80 81       	ld	r24, Z
    24e0:	0e 94 c4 11 	call	0x2388	; 0x2388 <UART_Send>
 * followed by the default stop character.
 */
void UART_SendString(uint8_t* str)
{
    uint8_t i;
    for (i = 0; str[i] != '\0'; i++)
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	8f 5f       	subi	r24, 0xFF	; 255
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	28 2f       	mov	r18, r24
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	9b 81       	ldd	r25, Y+3	; 0x03
    24f4:	fc 01       	movw	r30, r24
    24f6:	e2 0f       	add	r30, r18
    24f8:	f3 1f       	adc	r31, r19
    24fa:	80 81       	ld	r24, Z
    24fc:	88 23       	and	r24, r24
    24fe:	39 f7       	brne	.-50     	; 0x24ce <UART_SendString+0x14>
    {
        UART_Send(str[i]);
    }
    UART_Send(DefaultStop);
    2500:	8d e0       	ldi	r24, 0x0D	; 13
    2502:	0e 94 c4 11 	call	0x2388	; 0x2388 <UART_Send>
}
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <UART_RecString>:
 *
 * This function receives characters from UART until it encounters the default stop character,
 * then appends a null terminator to the end of the string.
 */
void UART_RecString(uint8_t* Buff)
{
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	00 d0       	rcall	.+0      	; 0x251c <UART_RecString+0xa>
    251c:	0f 92       	push	r0
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	9b 83       	std	Y+3, r25	; 0x03
    2524:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
    2526:	19 82       	std	Y+1, r1	; 0x01
    Buff[i] = UART_Recieve();
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	28 2f       	mov	r18, r24
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	9b 81       	ldd	r25, Y+3	; 0x03
    2532:	8c 01       	movw	r16, r24
    2534:	02 0f       	add	r16, r18
    2536:	13 1f       	adc	r17, r19
    2538:	0e 94 de 11 	call	0x23bc	; 0x23bc <UART_Recieve>
    253c:	f8 01       	movw	r30, r16
    253e:	80 83       	st	Z, r24
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <UART_RecString+0x4e>
    while (Buff[i] != DefaultStop)
    {
        i++;
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	8f 5f       	subi	r24, 0xFF	; 255
    2546:	89 83       	std	Y+1, r24	; 0x01
        Buff[i] = UART_Recieve();
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	9b 81       	ldd	r25, Y+3	; 0x03
    2552:	8c 01       	movw	r16, r24
    2554:	02 0f       	add	r16, r18
    2556:	13 1f       	adc	r17, r19
    2558:	0e 94 de 11 	call	0x23bc	; 0x23bc <UART_Recieve>
    255c:	f8 01       	movw	r30, r16
    255e:	80 83       	st	Z, r24
 */
void UART_RecString(uint8_t* Buff)
{
    uint8_t i = 0;
    Buff[i] = UART_Recieve();
    while (Buff[i] != DefaultStop)
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	28 2f       	mov	r18, r24
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	9b 81       	ldd	r25, Y+3	; 0x03
    256a:	fc 01       	movw	r30, r24
    256c:	e2 0f       	add	r30, r18
    256e:	f3 1f       	adc	r31, r19
    2570:	80 81       	ld	r24, Z
    2572:	8d 30       	cpi	r24, 0x0D	; 13
    2574:	31 f7       	brne	.-52     	; 0x2542 <UART_RecString+0x30>
    {
        i++;
        Buff[i] = UART_Recieve();
    }
    Buff[i] = '\0';
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	9b 81       	ldd	r25, Y+3	; 0x03
    2580:	fc 01       	movw	r30, r24
    2582:	e2 0f       	add	r30, r18
    2584:	f3 1f       	adc	r31, r19
    2586:	10 82       	st	Z, r1
}
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	08 95       	ret

00002598 <main>:
 ******************************************************************************/

#include "1_MCAL/spi.h"

int main(void)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	60 97       	sbiw	r28, 0x10	; 16
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61


    SPI_VoidInit(SPI_ENABLE, SPI_MASTER, SPI_DATA_MSP_FIRST, SPI_INTERRUPT_ENABLE);
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	41 e0       	ldi	r20, 0x01	; 1
    25b2:	21 e0       	ldi	r18, 0x01	; 1
    25b4:	0e 94 c3 0b 	call	0x1786	; 0x1786 <SPI_VoidInit>
    SPI_CLK_VoidInit(SPI_RISING_LEADING_FALLING_TRAILING,SPI_SETUP_LEADING_SAMPLE_TRAILING, SPI_FREQ_DIVIDED_BY_16);
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	61 e0       	ldi	r22, 0x01	; 1
    25bc:	43 e0       	ldi	r20, 0x03	; 3
    25be:	0e 94 28 0c 	call	0x1850	; 0x1850 <SPI_CLK_VoidInit>


    uint8_t dataSend = 0x12;
    25c2:	82 e1       	ldi	r24, 0x12	; 18
    25c4:	8f 87       	std	Y+15, r24	; 0x0f
        uint8_t receivedData;

        while (1)
        {
            SPI_uint8_tTranceive(dataSend, &receivedData);
    25c6:	9e 01       	movw	r18, r28
    25c8:	20 5f       	subi	r18, 0xF0	; 240
    25ca:	3f 4f       	sbci	r19, 0xFF	; 255
    25cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ce:	b9 01       	movw	r22, r18
    25d0:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <SPI_uint8_tTranceive>
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	aa e7       	ldi	r26, 0x7A	; 122
    25da:	b4 e4       	ldi	r27, 0x44	; 68
    25dc:	8b 87       	std	Y+11, r24	; 0x0b
    25de:	9c 87       	std	Y+12, r25	; 0x0c
    25e0:	ad 87       	std	Y+13, r26	; 0x0d
    25e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	4a e7       	ldi	r20, 0x7A	; 122
    25f2:	55 e4       	ldi	r21, 0x45	; 69
    25f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	8f 83       	std	Y+7, r24	; 0x07
    25fe:	98 87       	std	Y+8, r25	; 0x08
    2600:	a9 87       	std	Y+9, r26	; 0x09
    2602:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2604:	6f 81       	ldd	r22, Y+7	; 0x07
    2606:	78 85       	ldd	r23, Y+8	; 0x08
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	9a 85       	ldd	r25, Y+10	; 0x0a
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e8       	ldi	r20, 0x80	; 128
    2612:	5f e3       	ldi	r21, 0x3F	; 63
    2614:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2618:	88 23       	and	r24, r24
    261a:	2c f4       	brge	.+10     	; 0x2626 <main+0x8e>
		__ticks = 1;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	3f c0       	rjmp	.+126    	; 0x26a4 <main+0x10c>
	else if (__tmp > 65535)
    2626:	6f 81       	ldd	r22, Y+7	; 0x07
    2628:	78 85       	ldd	r23, Y+8	; 0x08
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	9a 85       	ldd	r25, Y+10	; 0x0a
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	3f ef       	ldi	r19, 0xFF	; 255
    2632:	4f e7       	ldi	r20, 0x7F	; 127
    2634:	57 e4       	ldi	r21, 0x47	; 71
    2636:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    263a:	18 16       	cp	r1, r24
    263c:	4c f5       	brge	.+82     	; 0x2690 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2640:	7c 85       	ldd	r23, Y+12	; 0x0c
    2642:	8d 85       	ldd	r24, Y+13	; 0x0d
    2644:	9e 85       	ldd	r25, Y+14	; 0x0e
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e2       	ldi	r20, 0x20	; 32
    264c:	51 e4       	ldi	r21, 0x41	; 65
    264e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	bc 01       	movw	r22, r24
    2658:	cd 01       	movw	r24, r26
    265a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	9e 83       	std	Y+6, r25	; 0x06
    2664:	8d 83       	std	Y+5, r24	; 0x05
    2666:	0f c0       	rjmp	.+30     	; 0x2686 <main+0xee>
    2668:	80 e9       	ldi	r24, 0x90	; 144
    266a:	91 e0       	ldi	r25, 0x01	; 1
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <main+0xdc>
    2678:	9c 83       	std	Y+4, r25	; 0x04
    267a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267c:	8d 81       	ldd	r24, Y+5	; 0x05
    267e:	9e 81       	ldd	r25, Y+6	; 0x06
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	9e 81       	ldd	r25, Y+6	; 0x06
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	69 f7       	brne	.-38     	; 0x2668 <main+0xd0>
    268e:	9b cf       	rjmp	.-202    	; 0x25c6 <main+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2690:	6f 81       	ldd	r22, Y+7	; 0x07
    2692:	78 85       	ldd	r23, Y+8	; 0x08
    2694:	89 85       	ldd	r24, Y+9	; 0x09
    2696:	9a 85       	ldd	r25, Y+10	; 0x0a
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	9e 81       	ldd	r25, Y+6	; 0x06
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <main+0x118>
    26b4:	9a 83       	std	Y+2, r25	; 0x02
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	86 cf       	rjmp	.-244    	; 0x25c6 <main+0x2e>

000026ba <__divmodhi4>:
    26ba:	97 fb       	bst	r25, 7
    26bc:	09 2e       	mov	r0, r25
    26be:	07 26       	eor	r0, r23
    26c0:	0a d0       	rcall	.+20     	; 0x26d6 <__divmodhi4_neg1>
    26c2:	77 fd       	sbrc	r23, 7
    26c4:	04 d0       	rcall	.+8      	; 0x26ce <__divmodhi4_neg2>
    26c6:	2e d0       	rcall	.+92     	; 0x2724 <__udivmodhi4>
    26c8:	06 d0       	rcall	.+12     	; 0x26d6 <__divmodhi4_neg1>
    26ca:	00 20       	and	r0, r0
    26cc:	1a f4       	brpl	.+6      	; 0x26d4 <__divmodhi4_exit>

000026ce <__divmodhi4_neg2>:
    26ce:	70 95       	com	r23
    26d0:	61 95       	neg	r22
    26d2:	7f 4f       	sbci	r23, 0xFF	; 255

000026d4 <__divmodhi4_exit>:
    26d4:	08 95       	ret

000026d6 <__divmodhi4_neg1>:
    26d6:	f6 f7       	brtc	.-4      	; 0x26d4 <__divmodhi4_exit>
    26d8:	90 95       	com	r25
    26da:	81 95       	neg	r24
    26dc:	9f 4f       	sbci	r25, 0xFF	; 255
    26de:	08 95       	ret

000026e0 <__udivmodsi4>:
    26e0:	a1 e2       	ldi	r26, 0x21	; 33
    26e2:	1a 2e       	mov	r1, r26
    26e4:	aa 1b       	sub	r26, r26
    26e6:	bb 1b       	sub	r27, r27
    26e8:	fd 01       	movw	r30, r26
    26ea:	0d c0       	rjmp	.+26     	; 0x2706 <__udivmodsi4_ep>

000026ec <__udivmodsi4_loop>:
    26ec:	aa 1f       	adc	r26, r26
    26ee:	bb 1f       	adc	r27, r27
    26f0:	ee 1f       	adc	r30, r30
    26f2:	ff 1f       	adc	r31, r31
    26f4:	a2 17       	cp	r26, r18
    26f6:	b3 07       	cpc	r27, r19
    26f8:	e4 07       	cpc	r30, r20
    26fa:	f5 07       	cpc	r31, r21
    26fc:	20 f0       	brcs	.+8      	; 0x2706 <__udivmodsi4_ep>
    26fe:	a2 1b       	sub	r26, r18
    2700:	b3 0b       	sbc	r27, r19
    2702:	e4 0b       	sbc	r30, r20
    2704:	f5 0b       	sbc	r31, r21

00002706 <__udivmodsi4_ep>:
    2706:	66 1f       	adc	r22, r22
    2708:	77 1f       	adc	r23, r23
    270a:	88 1f       	adc	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	1a 94       	dec	r1
    2710:	69 f7       	brne	.-38     	; 0x26ec <__udivmodsi4_loop>
    2712:	60 95       	com	r22
    2714:	70 95       	com	r23
    2716:	80 95       	com	r24
    2718:	90 95       	com	r25
    271a:	9b 01       	movw	r18, r22
    271c:	ac 01       	movw	r20, r24
    271e:	bd 01       	movw	r22, r26
    2720:	cf 01       	movw	r24, r30
    2722:	08 95       	ret

00002724 <__udivmodhi4>:
    2724:	aa 1b       	sub	r26, r26
    2726:	bb 1b       	sub	r27, r27
    2728:	51 e1       	ldi	r21, 0x11	; 17
    272a:	07 c0       	rjmp	.+14     	; 0x273a <__udivmodhi4_ep>

0000272c <__udivmodhi4_loop>:
    272c:	aa 1f       	adc	r26, r26
    272e:	bb 1f       	adc	r27, r27
    2730:	a6 17       	cp	r26, r22
    2732:	b7 07       	cpc	r27, r23
    2734:	10 f0       	brcs	.+4      	; 0x273a <__udivmodhi4_ep>
    2736:	a6 1b       	sub	r26, r22
    2738:	b7 0b       	sbc	r27, r23

0000273a <__udivmodhi4_ep>:
    273a:	88 1f       	adc	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	5a 95       	dec	r21
    2740:	a9 f7       	brne	.-22     	; 0x272c <__udivmodhi4_loop>
    2742:	80 95       	com	r24
    2744:	90 95       	com	r25
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	08 95       	ret

0000274c <__prologue_saves__>:
    274c:	2f 92       	push	r2
    274e:	3f 92       	push	r3
    2750:	4f 92       	push	r4
    2752:	5f 92       	push	r5
    2754:	6f 92       	push	r6
    2756:	7f 92       	push	r7
    2758:	8f 92       	push	r8
    275a:	9f 92       	push	r9
    275c:	af 92       	push	r10
    275e:	bf 92       	push	r11
    2760:	cf 92       	push	r12
    2762:	df 92       	push	r13
    2764:	ef 92       	push	r14
    2766:	ff 92       	push	r15
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	ca 1b       	sub	r28, r26
    2776:	db 0b       	sbc	r29, r27
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	09 94       	ijmp

00002784 <__epilogue_restores__>:
    2784:	2a 88       	ldd	r2, Y+18	; 0x12
    2786:	39 88       	ldd	r3, Y+17	; 0x11
    2788:	48 88       	ldd	r4, Y+16	; 0x10
    278a:	5f 84       	ldd	r5, Y+15	; 0x0f
    278c:	6e 84       	ldd	r6, Y+14	; 0x0e
    278e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2790:	8c 84       	ldd	r8, Y+12	; 0x0c
    2792:	9b 84       	ldd	r9, Y+11	; 0x0b
    2794:	aa 84       	ldd	r10, Y+10	; 0x0a
    2796:	b9 84       	ldd	r11, Y+9	; 0x09
    2798:	c8 84       	ldd	r12, Y+8	; 0x08
    279a:	df 80       	ldd	r13, Y+7	; 0x07
    279c:	ee 80       	ldd	r14, Y+6	; 0x06
    279e:	fd 80       	ldd	r15, Y+5	; 0x05
    27a0:	0c 81       	ldd	r16, Y+4	; 0x04
    27a2:	1b 81       	ldd	r17, Y+3	; 0x03
    27a4:	aa 81       	ldd	r26, Y+2	; 0x02
    27a6:	b9 81       	ldd	r27, Y+1	; 0x01
    27a8:	ce 0f       	add	r28, r30
    27aa:	d1 1d       	adc	r29, r1
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	ed 01       	movw	r28, r26
    27b8:	08 95       	ret

000027ba <_exit>:
    27ba:	f8 94       	cli

000027bc <__stop_program>:
    27bc:	ff cf       	rjmp	.-2      	; 0x27bc <__stop_program>
